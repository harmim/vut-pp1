#0
src/java/org/apache/cassandra/streaming/messages/StreamMessage.java:38: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void DataOutputStreamPlus.writeByte(int)' and 'void StreamMessage$Serializer.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' should be called atomically.
  36.       {
  37.           out.writeByte(message.type.id);
  38. >         message.type.outSerializer.serialize(message, out, version, session);
  39.       }
  40.   

#1
src/java/org/apache/cassandra/streaming/StreamTask.java:59: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int StreamTask.getTotalNumberOfFiles()' and 'long StreamTask.getTotalSize()' should be called atomically.
  57.       public StreamSummary getSummary()
  58.       {
  59. >         return new StreamSummary(tableId, getTotalNumberOfFiles(), getTotalSize());
  60.       }
  61.   }

#2
src/java/org/apache/cassandra/utils/Throwables.java:59: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Throwables.failIfCanCast(Throwable,Class)' and 'boolean Class.isInstance(Object)' should be called atomically.
  57.       public static void maybeFail(Throwable fail)
  58.       {
  59. >         if (failIfCanCast(fail, null))
  60.               throw new RuntimeException(fail);
  61.       }

#3
src/java/org/apache/cassandra/db/virtual/VirtualKeyspaceRegistry.java:63: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.get(Object)' and 'KeyspaceMetadata VirtualKeyspace.metadata()' should be called atomically.
  61.       {
  62.           VirtualKeyspace keyspace = virtualKeyspaces.get(name);
  63. >         return null != keyspace ? keyspace.metadata() : null;
  64.       }
  65.   

#4
src/java/org/apache/cassandra/net/AsyncChannelPromise.java:67: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'AsyncChannelPromise AsyncChannelPromise.withListener(Channel,GenericFutureListener)' and 'ChannelFuture Channel.writeAndFlush(Object,ChannelPromise)' should be called atomically.
  65.       public static ChannelFuture writeAndFlush(Channel channel, Object message, GenericFutureListener<? extends Future<? super Void>> listener)
  66.       {
  67. >         return channel.writeAndFlush(message, withListener(channel, listener));
  68.       }
  69.   

#5
src/java/org/apache/cassandra/utils/Throwables.java:81: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Class.isInstance(Object)' and 'Object Class.cast(Object)' should be called atomically.
  79.   
  80.           if (checked != null && checked.isInstance(fail))
  81. >             throw checked.cast(fail);
  82.   
  83.           return true;

#6
src/java/org/apache/cassandra/dht/Range.java:80: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'int RingPosition.compareTo(Object)' should be called atomically.
  78.           }
  79.   
  80. >         boolean thiswraps = isWrapAround(left, right);
  81.           boolean thatwraps = isWrapAround(that.left, that.right);
  82.           if (thiswraps == thatwraps)

#7
src/java/org/apache/cassandra/dht/Range.java:81: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'int RingPosition.compareTo(Object)' should be called atomically.
  79.   
  80.           boolean thiswraps = isWrapAround(left, right);
  81. >         boolean thatwraps = isWrapAround(that.left, that.right);
  82.           if (thiswraps == thatwraps)
  83.           {

#8
src/java/org/apache/cassandra/dht/Range.java:84: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'int RingPosition.compareTo(Object)' should be called atomically.
  82.           if (thiswraps == thatwraps)
  83.           {
  84. >             return left.compareTo(that.left) <= 0 && that.right.compareTo(right) <= 0;
  85.           }
  86.           else if (thiswraps)

#9
src/java/org/apache/cassandra/dht/Range.java:90: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'int RingPosition.compareTo(Object)' should be called atomically.
  88.               // wrapping might contain non-wrapping
  89.               // that is contained if both its tokens are in one of our wrap segments
  90. >             return left.compareTo(that.left) <= 0 || that.right.compareTo(right) <= 0;
  91.           }
  92.           else

#10
src/java/org/apache/cassandra/dht/Range.java:80: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean RingPosition.equals(Object)' and 'boolean Range.isWrapAround(RingPosition,RingPosition)' should be called atomically.
  78.           }
  79.   
  80. >         boolean thiswraps = isWrapAround(left, right);
  81.           boolean thatwraps = isWrapAround(that.left, that.right);
  82.           if (thiswraps == thatwraps)

#11
src/java/org/apache/cassandra/dht/Range.java:81: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int RingPosition.compareTo(Object)' and 'boolean Range.isWrapAround(RingPosition,RingPosition)' should be called atomically.
  79.   
  80.           boolean thiswraps = isWrapAround(left, right);
  81. >         boolean thatwraps = isWrapAround(that.left, that.right);
  82.           if (thiswraps == thatwraps)
  83.           {

#12
src/java/org/apache/cassandra/schema/SchemaConstants.java:77: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String String.toLowerCase()' and 'boolean Set.contains(Object)' should be called atomically.
  75.       public static boolean isLocalSystemKeyspace(String keyspaceName)
  76.       {
  77. >         return LOCAL_SYSTEM_KEYSPACE_NAMES.contains(keyspaceName.toLowerCase());
  78.       }
  79.   

#13
src/java/org/apache/cassandra/streaming/StreamTransferTask.java:101: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Map.isEmpty()' and 'void StreamSession.taskCompleted(StreamTransferTask)' should be called atomically.
   99.           // all file sent, notify session this task is complete.
  100.           if (signalComplete)
  101. >             session.taskCompleted(this);
  102.       }
  103.   

#14
src/java/org/apache/cassandra/streaming/StreamTransferTask.java:101: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.taskCompleted(StreamTransferTask)' and 'Object NonBlockingHashMap.remove(Object)' should be called atomically.
   99.           // all file sent, notify session this task is complete.
  100.           if (signalComplete)
  101. >             session.taskCompleted(this);
  102.       }
  103.   

#15
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:85: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'AbstractReplicaCollection$ReplicaMap RangesAtEndpoint.rangeMap(AbstractReplicaCollection$ReplicaList)' and 'Set Map.keySet()' should be called atomically.
  83.       public Set<Range<Token>> ranges()
  84.       {
  85. >         return byRange().keySet();
  86.       }
  87.   

#16
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:85: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Map RangesAtEndpoint.byRange()' and 'AbstractReplicaCollection$ReplicaMap RangesAtEndpoint.rangeMap(AbstractReplicaCollection$ReplicaList)' should be called atomically.
  83.       public Set<Range<Token>> ranges()
  84.       {
  85. >         return byRange().keySet();
  86.       }
  87.   

#17
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:85: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Map RangesAtEndpoint.byRange()' and 'Set Map.keySet()' should be called atomically.
  83.       public Set<Range<Token>> ranges()
  84.       {
  85. >         return byRange().keySet();
  86.       }
  87.   

#18
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:96: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'AbstractReplicaCollection$ReplicaMap RangesAtEndpoint.rangeMap(AbstractReplicaCollection$ReplicaList)' and 'Function RangesAtEndpoint.callsite_org.apache.cassandra.locator.RangesAtEndpoint$Lambda$_23_5()' should be called atomically.
  94.           ReplicaMap<Range<Token>> map = byRange;
  95.           if (map == null)
  96. >             byRange = map = rangeMap(list);
  97.           return map;
  98.       }

#19
src/java/org/apache/cassandra/streaming/messages/StreamMessageHeader.java:98: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'int StreamSession.sessionIndex()' should be called atomically.
   96.       {
   97.           planId = session.planId();
   98. >         sessionIndex = session.sessionIndex();
   99.       }
  100.   

#20
src/java/org/apache/cassandra/db/lifecycle/View.java:100: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int List.size()' and 'Object List.get(int)' should be called atomically.
   98.       public Memtable getCurrentMemtable()
   99.       {
  100. >         return liveMemtables.get(liveMemtables.size() - 1);
  101.       }
  102.   

#21
src/java/org/apache/cassandra/db/Keyspace.java:115: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String,Schema,boolean)' and 'Keyspace Schema.getKeyspaceInstance(String)' should be called atomically.
  113.       {
  114.           assert initialized || SchemaConstants.isLocalSystemKeyspace(keyspaceName);
  115. >         return open(keyspaceName, Schema.instance, true);
  116.       }
  117.   

#22
src/java/org/apache/cassandra/db/Keyspace.java:115: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean SchemaConstants.isLocalSystemKeyspace(String)' and 'Keyspace Keyspace.open(String,Schema,boolean)' should be called atomically.
  113.       {
  114.           assert initialized || SchemaConstants.isLocalSystemKeyspace(keyspaceName);
  115. >         return open(keyspaceName, Schema.instance, true);
  116.       }
  117.   

#23
src/java/org/apache/cassandra/db/Keyspace.java:114: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean SchemaConstants.isLocalSystemKeyspace(String)' and 'String String.toLowerCase()' should be called atomically.
  112.       public static Keyspace open(String keyspaceName)
  113.       {
  114. >         assert initialized || SchemaConstants.isLocalSystemKeyspace(keyspaceName);
  115.           return open(keyspaceName, Schema.instance, true);
  116.       }

#24
src/java/org/apache/cassandra/db/Keyspace.java:115: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Set.contains(Object)' and 'Keyspace Keyspace.open(String,Schema,boolean)' should be called atomically.
  113.       {
  114.           assert initialized || SchemaConstants.isLocalSystemKeyspace(keyspaceName);
  115. >         return open(keyspaceName, Schema.instance, true);
  116.       }
  117.   

#25
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:126: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String InetAddressAndPort.toString(boolean)' should be called atomically.
  124.           if (withPort)
  125.           {
  126. >             return toString();
  127.           }
  128.           else

#26
src/java/org/apache/cassandra/db/Keyspace.java:126: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Schema.getKeyspaceInstance(String)' and 'Object Map.get(Object)' should be called atomically.
  124.       private static Keyspace open(String keyspaceName, Schema schema, boolean loadSSTables)
  125.       {
  126. >         Keyspace keyspaceInstance = schema.getKeyspaceInstance(keyspaceName);
  127.   
  128.           if (keyspaceInstance == null)

#27
src/java/org/apache/cassandra/db/Keyspace.java:134: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.get(Object)' and 'Keyspace Schema.getKeyspaceInstance(String)' should be called atomically.
  132.               synchronized (Keyspace.class)
  133.               {
  134. >                 keyspaceInstance = schema.getKeyspaceInstance(keyspaceName);
  135.                   if (keyspaceInstance == null)
  136.                   {

#28
src/java/org/apache/cassandra/streaming/SessionInfo.java:133: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFiles(Collection)' and 'Iterator Collection.iterator()' should be called atomically.
  131.       public long getTotalFilesToReceive()
  132.       {
  133. >         return getTotalFiles(receivingSummaries);
  134.       }
  135.   

#29
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:137: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString(boolean)' and 'String InetAddress.toString()' should be called atomically.
  135.       public String toString()
  136.       {
  137. >         return toString(true);
  138.       }
  139.   

#30
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:137: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString(boolean)' and 'String InetAddressAndPort.toString(InetAddress,int)' should be called atomically.
  135.       public String toString()
  136.       {
  137. >         return toString(true);
  138.       }
  139.   

#31
src/java/org/apache/cassandra/streaming/SessionInfo.java:141: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFiles(Collection)' and 'Iterator Collection.iterator()' should be called atomically.
  139.       public long getTotalFilesToSend()
  140.       {
  141. >         return getTotalFiles(sendingSummaries);
  142.       }
  143.   

#32
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:144: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString(InetAddress,int)' and 'String InetAddress.getHostAddress()' should be called atomically.
  142.           if (withPort)
  143.           {
  144. >             return toString(address, port);
  145.           }
  146.           else

#33
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:145: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int StreamSession.sessionIndex()' and 'UUID StreamSession.planId()' should be called atomically.
  143.           StreamInitMessage message = new StreamInitMessage(FBUtilities.getBroadcastAddressAndPort(),
  144.                                                             session.sessionIndex(),
  145. >                                                           session.planId(),
  146.                                                             session.streamOperation(),
  147.                                                             session.getPendingRepair(),

#34
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:149: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  147.                                                             session.getPendingRepair(),
  148.                                                             session.getPreviewKind());
  149. >         sendMessage(message);
  150.       }
  151.   

#35
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:149: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  147.                                                             session.getPendingRepair(),
  148.                                                             session.getPreviewKind());
  149. >         sendMessage(message);
  150.       }
  151.   

#36
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:149: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  147.                                                             session.getPendingRepair(),
  148.                                                             session.getPreviewKind());
  149. >         sendMessage(message);
  150.       }
  151.   

#37
src/java/org/apache/cassandra/schema/KeyspaceMetadata.java:150: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object ImmutableMap.get(Object)' and 'TableMetadata Tables.getNullable(String)' should be called atomically.
  148.           ViewMetadata view = views.getNullable(tableOrViewName);
  149.           return view == null
  150. >              ? tables.getNullable(tableOrViewName)
  151.                : view.metadata;
  152.       }

#38
src/java/org/apache/cassandra/schema/KeyspaceMetadata.java:150: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata Tables.getNullable(String)' and 'Object ImmutableMap.get(Object)' should be called atomically.
  148.           ViewMetadata view = views.getNullable(tableOrViewName);
  149.           return view == null
  150. >              ? tables.getNullable(tableOrViewName)
  151.                : view.metadata;
  152.       }

#39
src/java/org/apache/cassandra/schema/KeyspaceMetadata.java:148: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ViewMetadata Views.getNullable(String)' and 'Object ImmutableMap.get(Object)' should be called atomically.
  146.       public TableMetadata getTableOrViewNullable(String tableOrViewName)
  147.       {
  148. >         ViewMetadata view = views.getNullable(tableOrViewName);
  149.           return view == null
  150.                ? tables.getNullable(tableOrViewName)

#40
src/java/org/apache/cassandra/schema/KeyspaceMetadata.java:150: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ViewMetadata Views.getNullable(String)' and 'TableMetadata Tables.getNullable(String)' should be called atomically.
  148.           ViewMetadata view = views.getNullable(tableOrViewName);
  149.           return view == null
  150. >              ? tables.getNullable(tableOrViewName)
  151.                : view.metadata;
  152.       }

#41
src/java/org/apache/cassandra/streaming/SessionInfo.java:149: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizes(Collection)' and 'Iterator Collection.iterator()' should be called atomically.
  147.       public long getTotalSizeToReceive()
  148.       {
  149. >         return getTotalSizes(receivingSummaries);
  150.       }
  151.   

#42
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:154: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'HostAndPort HostAndPort.fromParts(String,int)' and 'String HostAndPort.toString()' should be called atomically.
  152.       public static String toString(InetAddress address, int port)
  153.       {
  154. >         return HostAndPort.fromParts(address.getHostAddress(), port).toString();
  155.       }
  156.   

#43
src/java/org/apache/cassandra/locator/InetAddressAndPort.java:154: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'HostAndPort HostAndPort.fromParts(String,int)' should be called atomically.
  152.       public static String toString(InetAddress address, int port)
  153.       {
  154. >         return HostAndPort.fromParts(address.getHostAddress(), port).toString();
  155.       }
  156.   

#44
src/java/org/apache/cassandra/streaming/SessionInfo.java:157: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizes(Collection)' and 'Iterator Collection.iterator()' should be called atomically.
  155.       public long getTotalSizeToSend()
  156.       {
  157. >         return getTotalSizes(sendingSummaries);
  158.       }
  159.   

#45
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:157: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set StreamCoordinator.getAllSessionInfo()' and 'Collection Map.values()' should be called atomically.
  155.       public StreamState getCurrentState()
  156.       {
  157. >         return new StreamState(planId, streamOperation, coordinator.getAllSessionInfo());
  158.       }
  159.   

#46
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection$ReplicaList.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#47
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection$ReplicaList.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#48
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection.iterator()' and 'Iterator AbstractReplicaCollection$ReplicaList.iterator()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#49
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection.iterator()' and 'Iterator AbstractReplicaCollection$ReplicaList.iterator()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#50
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#51
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator AbstractReplicaCollection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#52
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator List.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#53
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List Arrays.asList(Object[])' and 'Iterator List.iterator()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#54
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List Range.unwrap()' and 'Iterator List.iterator()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#55
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List Range.unwrap()' and 'RingPosition RingPosition.minValue()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#56
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:162: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Range Replica.range()' should be called atomically.
  160.           for (Replica replica : this)
  161.           {
  162. >             if (replica.range().isWrapAround())
  163.                   ++wrapAroundCount;
  164.           }

#57
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:173: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Range Replica.range()' should be called atomically.
  171.           for (Replica replica : this)
  172.           {
  173. >             if (!replica.range().isWrapAround())
  174.               {
  175.                   builder.add(replica);

#58
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Replica Replica.decorateSubrange(Range)' should be called atomically.
  177.               }
  178.               for (Range<Token> range : replica.range().unwrap())
  179. >                 builder.add(replica.decorateSubrange(range));
  180.           }
  181.           return builder.build();

#59
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Range Replica.range()' and 'List Range.unwrap()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#60
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:162: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Range Replica.range()' and 'boolean Range.isWrapAround()' should be called atomically.
  160.           for (Replica replica : this)
  161.           {
  162. >             if (replica.range().isWrapAround())
  163.                   ++wrapAroundCount;
  164.           }

#61
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:173: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Range Replica.range()' and 'boolean Range.isWrapAround()' should be called atomically.
  171.           for (Replica replica : this)
  172.           {
  173. >             if (!replica.range().isWrapAround())
  174.               {
  175.                   builder.add(replica);

#62
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'RangesAtEndpoint$Builder RangesAtEndpoint.builder(InetAddressAndPort,int)' and 'Iterator AbstractReplicaCollection.iterator()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#63
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Replica Replica.decorateSubrange(Range)' and 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' should be called atomically.
  177.               }
  178.               for (Range<Token> range : replica.range().unwrap())
  179. >                 builder.add(replica.decorateSubrange(range));
  180.           }
  181.           return builder.build();

#64
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Replica Replica.decorateSubrange(Range)' and 'boolean Range.contains(Range)' should be called atomically.
  177.               }
  178.               for (Range<Token> range : replica.range().unwrap())
  179. >                 builder.add(replica.decorateSubrange(range));
  180.           }
  181.           return builder.build();

#65
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' and 'boolean Iterator.hasNext()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#66
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' and 'boolean Iterator.hasNext()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#67
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.add(Object)' and 'Iterator List.iterator()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#68
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#69
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171. >         for (Replica replica : this)
  172.           {
  173.               if (!replica.range().isWrapAround())

#70
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#71
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'RangesAtEndpoint RangesAtEndpoint$Builder.build()' should be called atomically.
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }
  181. >         return builder.build();
  182.       }
  183.   

#72
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:168: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'RangesAtEndpoint RangesAtEndpoint.snapshot()' should be called atomically.
  166.           assert wrapAroundCount <= 1;
  167.           if (wrapAroundCount == 0)
  168. >             return snapshot();
  169.   
  170.           RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);

#73
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:170: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'int AbstractReplicaCollection.size()' should be called atomically.
  168.               return snapshot();
  169.   
  170. >         RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171.           for (Replica replica : this)
  172.           {

#74
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'Range Replica.range()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#75
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:175: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' should be called atomically.
  173.               if (!replica.range().isWrapAround())
  174.               {
  175. >                 builder.add(replica);
  176.                   continue;
  177.               }

#76
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'boolean Iterator.hasNext()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#77
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:162: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'boolean Range.isWrapAround(RingPosition,RingPosition)' should be called atomically.
  160.           for (Replica replica : this)
  161.           {
  162. >             if (replica.range().isWrapAround())
  163.                   ++wrapAroundCount;
  164.           }

#78
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:173: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'boolean Range.isWrapAround(RingPosition,RingPosition)' should be called atomically.
  171.           for (Replica replica : this)
  172.           {
  173. >             if (!replica.range().isWrapAround())
  174.               {
  175.                   builder.add(replica);

#79
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'Range Replica.range()' should be called atomically.
  176.                   continue;
  177.               }
  178. >             for (Range<Token> range : replica.range().unwrap())
  179.                   builder.add(replica.decorateSubrange(range));
  180.           }

#80
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:175: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' should be called atomically.
  173.               if (!replica.range().isWrapAround())
  174.               {
  175. >                 builder.add(replica);
  176.                   continue;
  177.               }

#81
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:160: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'boolean Iterator.hasNext()' should be called atomically.
  158.       {
  159.           int wrapAroundCount = 0;
  160. >         for (Replica replica : this)
  161.           {
  162.               if (replica.range().isWrapAround())

#82
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Replica.isFull()' and 'ReplicaCollection$Builder RangesAtEndpoint$Builder.add(Replica)' should be called atomically.
  177.               }
  178.               for (Range<Token> range : replica.range().unwrap())
  179. >                 builder.add(replica.decorateSubrange(range));
  180.           }
  181.           return builder.build();

#83
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:170: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int AbstractReplicaCollection$ReplicaList.size()' and 'RangesAtEndpoint$Builder RangesAtEndpoint.builder(InetAddressAndPort,int)' should be called atomically.
  168.               return snapshot();
  169.   
  170. >         RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171.           for (Replica replica : this)
  172.           {

#84
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:170: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int AbstractReplicaCollection.size()' and 'RangesAtEndpoint$Builder RangesAtEndpoint.builder(InetAddressAndPort,int)' should be called atomically.
  168.               return snapshot();
  169.   
  170. >         RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171.           for (Replica replica : this)
  172.           {

#85
src/java/org/apache/cassandra/locator/RangesAtEndpoint.java:170: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int AbstractReplicaCollection.size()' and 'int AbstractReplicaCollection$ReplicaList.size()' should be called atomically.
  168.               return snapshot();
  169.   
  170. >         RangesAtEndpoint.Builder builder = builder(endpoint, size() + wrapAroundCount);
  171.           for (Replica replica : this)
  172.           {

#86
src/java/org/apache/cassandra/locator/ReplicaCollection.java:159: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Iterable.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  157.           default public Builder<C> addAll(Iterable<Replica> replicas, Conflict ignoreConflicts)
  158.           {
  159. >             for (Replica replica : replicas)
  160.                   add(replica, ignoreConflicts);
  161.               return this;

#87
src/java/org/apache/cassandra/locator/ReplicaCollection.java:159: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  157.           default public Builder<C> addAll(Iterable<Replica> replicas, Conflict ignoreConflicts)
  158.           {
  159. >             for (Replica replica : replicas)
  160.                   add(replica, ignoreConflicts);
  161.               return this;

#88
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:163: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Attribute Channel.attr(AttributeKey)' and 'void Attribute.set(Object)' should be called atomically.
  161.       {
  162.           this.controlMessageChannel = channel;
  163. >         channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  164.           scheduleKeepAliveTask(channel);
  165.       }

#89
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:164: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Attribute.set(Object)' and 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' should be called atomically.
  162.           this.controlMessageChannel = channel;
  163.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  164. >         scheduleKeepAliveTask(channel);
  165.       }
  166.   

#90
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:164: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  162.           this.controlMessageChannel = channel;
  163.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  164. >         scheduleKeepAliveTask(channel);
  165.       }
  166.   

#91
src/java/org/apache/cassandra/streaming/SessionInfo.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  169.       {
  170.           long total = 0;
  171. >         for (StreamSummary summary : summaries)
  172.               total += summary.files;
  173.           return total;

#92
src/java/org/apache/cassandra/streaming/SessionInfo.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'boolean Iterator.hasNext()' should be called atomically.
  169.       {
  170.           long total = 0;
  171. >         for (StreamSummary summary : summaries)
  172.               total += summary.files;
  173.           return total;

#93
src/java/org/apache/cassandra/streaming/SessionInfo.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  169.       {
  170.           long total = 0;
  171. >         for (StreamSummary summary : summaries)
  172.               total += summary.files;
  173.           return total;

#94
src/java/org/apache/cassandra/locator/Replica.java:172: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'InetAddressAndPort Replica.endpoint()' and 'boolean Replica.isFull()' should be called atomically.
  170.       {
  171.           Preconditions.checkArgument(range.contains(subrange));
  172. >         return new Replica(endpoint(), subrange, isFull());
  173.       }
  174.   

#95
src/java/org/apache/cassandra/locator/Replica.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.contains(Range)' and 'boolean RingPosition.equals(Object)' should be called atomically.
  169.       public Replica decorateSubrange(Range<Token> subrange)
  170.       {
  171. >         Preconditions.checkArgument(range.contains(subrange));
  172.           return new Replica(endpoint(), subrange, isFull());
  173.       }

#96
src/java/org/apache/cassandra/locator/Replica.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.contains(Range)' and 'void Preconditions.checkArgument(boolean)' should be called atomically.
  169.       public Replica decorateSubrange(Range<Token> subrange)
  170.       {
  171. >         Preconditions.checkArgument(range.contains(subrange));
  172.           return new Replica(endpoint(), subrange, isFull());
  173.       }

#97
src/java/org/apache/cassandra/locator/Replica.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'void Preconditions.checkArgument(boolean)' should be called atomically.
  169.       public Replica decorateSubrange(Range<Token> subrange)
  170.       {
  171. >         Preconditions.checkArgument(range.contains(subrange));
  172.           return new Replica(endpoint(), subrange, isFull());
  173.       }

#98
src/java/org/apache/cassandra/locator/Replica.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean RingPosition.equals(Object)' and 'void Preconditions.checkArgument(boolean)' should be called atomically.
  169.       public Replica decorateSubrange(Range<Token> subrange)
  170.       {
  171. >         Preconditions.checkArgument(range.contains(subrange));
  172.           return new Replica(endpoint(), subrange, isFull());
  173.       }

#99
src/java/org/apache/cassandra/locator/Replica.java:171: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int RingPosition.compareTo(Object)' and 'void Preconditions.checkArgument(boolean)' should be called atomically.
  169.       public Replica decorateSubrange(Range<Token> subrange)
  170.       {
  171. >         Preconditions.checkArgument(range.contains(subrange));
  172.           return new Replica(endpoint(), subrange, isFull());
  173.       }

#100
src/java/org/apache/cassandra/locator/Replica.java:172: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Preconditions.checkArgument(boolean)' and 'InetAddressAndPort Replica.endpoint()' should be called atomically.
  170.       {
  171.           Preconditions.checkArgument(range.contains(subrange));
  172. >         return new Replica(endpoint(), subrange, isFull());
  173.       }
  174.   

#101
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:180: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Channel NettyStreamingMessageSender.createChannel(boolean)' and 'Channel StreamConnectionFactory.createConnection(OutboundConnectionSettings,int)' should be called atomically.
  178.                *     in {@link Handler#setupStreamingPipeline}
  179.                */
  180. >             controlMessageChannel = createChannel(true);
  181.               scheduleKeepAliveTask(controlMessageChannel);
  182.           }

#102
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Channel NettyStreamingMessageSender.createChannel(boolean)' and 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' should be called atomically.
  179.                */
  180.               controlMessageChannel = createChannel(true);
  181. >             scheduleKeepAliveTask(controlMessageChannel);
  182.           }
  183.       }

#103
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.debug(String,Object[])' and 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' should be called atomically.
  179.                */
  180.               controlMessageChannel = createChannel(true);
  181. >             scheduleKeepAliveTask(controlMessageChannel);
  182.           }
  183.       }

#104
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  179.                */
  180.               controlMessageChannel = createChannel(true);
  181. >             scheduleKeepAliveTask(controlMessageChannel);
  182.           }
  183.       }

#105
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Integer Integer.valueOf(int)' and 'long SessionInfo.getTotalFilesToReceive()' should be called atomically.
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),
  181. >                               sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),

#106
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:182: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Long Long.valueOf(long)' and 'long SessionInfo.getTotalSizeToReceive()' should be called atomically.
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));

#107
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:184: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Long Long.valueOf(long)' and 'long SessionInfo.getTotalSizeToSend()' should be called atomically.
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);

#108
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:177: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SessionInfo StreamSession.getSessionInfo()' and 'ArrayList Lists.newArrayList()' should be called atomically.
  175.       void handleSessionPrepared(StreamSession session)
  176.       {
  177. >         SessionInfo sessionInfo = session.getSessionInfo();
  178.           logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179.                                 session.planId(),

#109
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SessionInfo StreamSession.getSessionInfo()' and 'UUID StreamSession.planId()' should be called atomically.
  177.           SessionInfo sessionInfo = session.getSessionInfo();
  178.           logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179. >                               session.planId(),
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),

#110
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:182: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'String FBUtilities.prettyPrintMemory(long,boolean)' should be called atomically.
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));

#111
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:184: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'String FBUtilities.prettyPrintMemory(long,boolean)' should be called atomically.
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);

#112
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:183: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'long SessionInfo.getTotalFilesToSend()' should be called atomically.
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183. >                               sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);

#113
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'void Logger.info(String,Object[])' should be called atomically.
  176.       {
  177.           SessionInfo sessionInfo = session.getSessionInfo();
  178. >         logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),

#114
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:183: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long,boolean)' and 'long SessionInfo.getTotalFilesToSend()' should be called atomically.
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183. >                               sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);

#115
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:178: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long,boolean)' and 'void Logger.info(String,Object[])' should be called atomically.
  176.       {
  177.           SessionInfo sessionInfo = session.getSessionInfo();
  178. >         logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),

#116
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:180: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'int StreamSession.sessionIndex()' should be called atomically.
  178.           logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179.                                 session.planId(),
  180. >                               session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),

#117
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'UUID StreamSession.planId()' should be called atomically.
  177.           SessionInfo sessionInfo = session.getSessionInfo();
  178.           logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179. >                               session.planId(),
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),

#118
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:180: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int StreamSession.sessionIndex()' and 'Integer Integer.valueOf(int)' should be called atomically.
  178.           logger.info("[Stream #{} ID#{}] Prepare completed. Receiving {} files({}), sending {} files({})",
  179.                                 session.planId(),
  180. >                               session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),

#119
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFiles(Collection)' and 'Long Long.valueOf(long)' should be called atomically.
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),
  181. >                               sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),

#120
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:183: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFiles(Collection)' and 'Long Long.valueOf(long)' should be called atomically.
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183. >                               sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);

#121
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFilesToReceive()' and 'Long Long.valueOf(long)' should be called atomically.
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),
  181. >                               sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),

#122
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:181: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFilesToReceive()' and 'long SessionInfo.getTotalFiles(Collection)' should be called atomically.
  179.                                 session.planId(),
  180.                                 session.sessionIndex(),
  181. >                               sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),

#123
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:183: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFilesToSend()' and 'Long Long.valueOf(long)' should be called atomically.
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183. >                               sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);

#124
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:183: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalFilesToSend()' and 'long SessionInfo.getTotalFiles(Collection)' should be called atomically.
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183. >                               sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);

#125
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:182: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizeToReceive()' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));

#126
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:182: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizeToReceive()' and 'long SessionInfo.getTotalSizes(Collection)' should be called atomically.
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));

#127
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:184: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizeToSend()' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);

#128
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:184: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizeToSend()' and 'long SessionInfo.getTotalSizes(Collection)' should be called atomically.
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);

#129
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:182: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizes(Collection)' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  180.                                 session.sessionIndex(),
  181.                                 sessionInfo.getTotalFilesToReceive(),
  182. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));

#130
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:184: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long SessionInfo.getTotalSizes(Collection)' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  182.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToReceive()),
  183.                                 sessionInfo.getTotalFilesToSend(),
  184. >                               FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);

#131
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:186: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.info(String,Object[])' and 'void StreamCoordinator.addSessionInfo(SessionInfo)' should be called atomically.
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186. >         coordinator.addSessionInfo(sessionInfo);
  187.           fireStreamEvent(event);
  188.       }

#132
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:187: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator$HostStreamingData.addSessionInfo(SessionInfo)' and 'void StreamResultFuture.fireStreamEvent(StreamEvent)' should be called atomically.
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);
  187. >         fireStreamEvent(event);
  188.       }
  189.   

#133
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:186: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator.addSessionInfo(SessionInfo)' and 'StreamCoordinator$HostStreamingData StreamCoordinator.getOrCreateHostData(InetAddressAndPort)' should be called atomically.
  184.                                 FBUtilities.prettyPrintMemory(sessionInfo.getTotalSizeToSend()));
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186. >         coordinator.addSessionInfo(sessionInfo);
  187.           fireStreamEvent(event);
  188.       }

#134
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:187: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator.addSessionInfo(SessionInfo)' and 'void StreamResultFuture.fireStreamEvent(StreamEvent)' should be called atomically.
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);
  187. >         fireStreamEvent(event);
  188.       }
  189.   

#135
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:187: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'Iterator Collection.iterator()' should be called atomically.
  185.           StreamEvent.SessionPreparedEvent event = new StreamEvent.SessionPreparedEvent(planId, sessionInfo);
  186.           coordinator.addSessionInfo(sessionInfo);
  187. >         fireStreamEvent(event);
  188.       }
  189.   

#136
src/java/org/apache/cassandra/streaming/SessionInfo.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  177.       {
  178.           long total = 0;
  179. >         for (StreamSummary summary : summaries)
  180.               total += summary.totalSize;
  181.           return total;

#137
src/java/org/apache/cassandra/streaming/SessionInfo.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'boolean Iterator.hasNext()' should be called atomically.
  177.       {
  178.           long total = 0;
  179. >         for (StreamSummary summary : summaries)
  180.               total += summary.totalSize;
  181.           return total;

#138
src/java/org/apache/cassandra/streaming/SessionInfo.java:179: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  177.       {
  178.           long total = 0;
  179. >         for (StreamSummary summary : summaries)
  180.               total += summary.totalSize;
  181.           return total;

#139
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:192: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'EventLoop Channel.eventLoop()' and 'ScheduledFuture EventLoop.scheduleAtFixedRate(Runnable,long,long,TimeUnit)' should be called atomically.
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);
  192. >         ScheduledFuture<?> scheduledFuture = channel.eventLoop().scheduleAtFixedRate(task, 0, keepAlivePeriod, TimeUnit.SECONDS);
  193.           channelKeepAlives.add(scheduledFuture);
  194.           task.future = scheduledFuture;

#140
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:189: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Integer Integer.valueOf(int)' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189. >             logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);

#141
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:193: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ScheduledFuture EventLoop.scheduleAtFixedRate(Runnable,long,long,TimeUnit)' and 'boolean Collection.add(Object)' should be called atomically.
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);
  192.           ScheduledFuture<?> scheduledFuture = channel.eventLoop().scheduleAtFixedRate(task, 0, keepAlivePeriod, TimeUnit.SECONDS);
  193. >         channelKeepAlives.add(scheduledFuture);
  194.           task.future = scheduledFuture;
  195.       }

#142
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:189: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'Integer Integer.valueOf(int)' should be called atomically.
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189. >             logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);

#143
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:189: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189. >             logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);

#144
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:189: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StringBuilder.toString()' and 'Integer Integer.valueOf(int)' should be called atomically.
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189. >             logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);

#145
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:192: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'EventLoop Channel.eventLoop()' should be called atomically.
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);
  192. >         ScheduledFuture<?> scheduledFuture = channel.eventLoop().scheduleAtFixedRate(task, 0, keepAlivePeriod, TimeUnit.SECONDS);
  193.           channelKeepAlives.add(scheduledFuture);
  194.           task.future = scheduledFuture;

#146
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:189: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189. >             logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);

#147
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:188: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  186.       {
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188. >         if (logger.isDebugEnabled())
  189.               logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   

#148
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:187: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' and 'int Integer.intValue()' should be called atomically.
  185.       private void scheduleKeepAliveTask(Channel channel)
  186.       {
  187. >         int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188.           if (logger.isDebugEnabled())
  189.               logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);

#149
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:188: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int Integer.intValue()' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  186.       {
  187.           int keepAlivePeriod = DatabaseDescriptor.getStreamingKeepAlivePeriod();
  188. >         if (logger.isDebugEnabled())
  189.               logger.debug("{} Scheduling keep-alive task with {}s period.", createLogTag(session, channel), keepAlivePeriod);
  190.   

#150
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:192: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.debug(String,Object,Object)' and 'EventLoop Channel.eventLoop()' should be called atomically.
  190.   
  191.           KeepAliveTask task = new KeepAliveTask(channel, session);
  192. >         ScheduledFuture<?> scheduledFuture = channel.eventLoop().scheduleAtFixedRate(task, 0, keepAlivePeriod, TimeUnit.SECONDS);
  193.           channelKeepAlives.add(scheduledFuture);
  194.           task.future = scheduledFuture;

#151
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:194: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SessionInfo StreamSession.getSessionInfo()' and 'ArrayList Lists.newArrayList()' should be called atomically.
  192.           logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194. >         SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();

#152
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:195: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SessionInfo StreamSession.getSessionInfo()' and 'void StreamCoordinator.addSessionInfo(SessionInfo)' should be called atomically.
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195. >         coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();
  197.       }

#153
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:192: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'void Logger.info(String,Object,Object)' should be called atomically.
  190.       void handleSessionComplete(StreamSession session)
  191.       {
  192. >         logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();

#154
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:194: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'SessionInfo StreamSession.getSessionInfo()' should be called atomically.
  192.           logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194. >         SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();

#155
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:195: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'void StreamCoordinator.addSessionInfo(SessionInfo)' should be called atomically.
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195. >         coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();
  197.       }

#156
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:193: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.info(String,Object,Object)' and 'void StreamResultFuture.fireStreamEvent(StreamEvent)' should be called atomically.
  191.       {
  192.           logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193. >         fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);

#157
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:196: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator$HostStreamingData.addSessionInfo(SessionInfo)' and 'void StreamResultFuture.maybeComplete()' should be called atomically.
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196. >         maybeComplete();
  197.       }
  198.   

#158
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:195: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator.addSessionInfo(SessionInfo)' and 'StreamCoordinator$HostStreamingData StreamCoordinator.getOrCreateHostData(InetAddressAndPort)' should be called atomically.
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195. >         coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();
  197.       }

#159
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:196: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamCoordinator.addSessionInfo(SessionInfo)' and 'void StreamResultFuture.maybeComplete()' should be called atomically.
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196. >         maybeComplete();
  197.       }
  198.   

#160
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:193: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'Iterator Collection.iterator()' should be called atomically.
  191.       {
  192.           logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193. >         fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);

#161
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:194: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'SessionInfo StreamSession.getSessionInfo()' should be called atomically.
  192.           logger.info("[Stream #{}] Session with {} is complete", session.planId(), session.peer);
  193.           fireStreamEvent(new StreamEvent.SessionCompleteEvent(session));
  194. >         SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196.           maybeComplete();

#162
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:196: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.maybeComplete()' and 'boolean StreamCoordinator.hasActiveSessions()' should be called atomically.
  194.           SessionInfo sessionInfo = session.getSessionInfo();
  195.           coordinator.addSessionInfo(sessionInfo);
  196. >         maybeComplete();
  197.       }
  198.   

#163
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:207: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Attribute Channel.attr(AttributeKey)' and 'void Attribute.set(Object)' should be called atomically.
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }
  207. >         channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208.           logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;

#164
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:200: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Channel StreamConnectionFactory.createConnection(OutboundConnectionSettings,int)' and 'boolean StreamSession.attachOutbound(Channel)' should be called atomically.
  198.       {
  199.           Channel channel = factory.createConnection(template, streamingVersion);
  200. >         session.attachOutbound(channel);
  201.   
  202.           if (isInboundHandlerNeeded)

#165
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:208: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ChannelId Channel.id()' and 'SocketAddress Channel.localAddress()' should be called atomically.
  206.           }
  207.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208. >         logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;
  210.       }

#166
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:205: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ChannelPipeline Channel.pipeline()' and 'ChannelPipeline ChannelPipeline.addLast(String,ChannelHandler)' should be called atomically.
  203.           {
  204.               ChannelPipeline pipeline = channel.pipeline();
  205. >             pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }
  207.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);

#167
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:207: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ChannelPipeline ChannelPipeline.addLast(String,ChannelHandler)' and 'Attribute Channel.attr(AttributeKey)' should be called atomically.
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }
  207. >         channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208.           logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;

#168
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:207: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object ConcurrentMap.putIfAbsent(Object,Object)' and 'Attribute Channel.attr(AttributeKey)' should be called atomically.
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }
  207. >         channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208.           logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;

#169
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:204: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object ConcurrentMap.putIfAbsent(Object,Object)' and 'ChannelPipeline Channel.pipeline()' should be called atomically.
  202.           if (isInboundHandlerNeeded)
  203.           {
  204. >             ChannelPipeline pipeline = channel.pipeline();
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }

#170
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:208: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SocketAddress Channel.localAddress()' and 'SocketAddress Channel.remoteAddress()' should be called atomically.
  206.           }
  207.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208. >         logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;
  210.       }

#171
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:208: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'SocketAddress Channel.remoteAddress()' and 'void Logger.debug(String,Object[])' should be called atomically.
  206.           }
  207.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208. >         logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;
  210.       }

#172
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:207: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.attachOutbound(Channel)' and 'Attribute Channel.attr(AttributeKey)' should be called atomically.
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }
  207. >         channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208.           logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;

#173
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:204: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.attachOutbound(Channel)' and 'ChannelPipeline Channel.pipeline()' should be called atomically.
  202.           if (isInboundHandlerNeeded)
  203.           {
  204. >             ChannelPipeline pipeline = channel.pipeline();
  205.               pipeline.addLast("stream", new StreamingInboundHandler(template.to, streamingVersion, session));
  206.           }

#174
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:200: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.attachOutbound(Channel)' and 'void StreamSession.failIfFinished()' should be called atomically.
  198.       {
  199.           Channel channel = factory.createConnection(template, streamingVersion);
  200. >         session.attachOutbound(channel);
  201.   
  202.           if (isInboundHandlerNeeded)

#175
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:208: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Attribute.set(Object)' and 'ChannelId Channel.id()' should be called atomically.
  206.           }
  207.           channel.attr(TRANSFERRING_FILE_ATTR).set(Boolean.FALSE);
  208. >         logger.debug("Creating channel id {} local {} remote {}", channel.id(), channel.localAddress(), channel.remoteAddress());
  209.           return channel;
  210.       }

#176
src/java/org/apache/cassandra/streaming/StreamResultFuture.java:202: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'Iterator Collection.iterator()' should be called atomically.
  200.       {
  201.           coordinator.updateProgress(progress);
  202. >         fireStreamEvent(new StreamEvent.ProgressEvent(planId, progress));
  203.       }
  204.   

#177
src/java/org/apache/cassandra/db/Keyspace.java:205: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection ConcurrentMap.values()' and 'Collection Collections.unmodifiableCollection(Collection)' should be called atomically.
  203.       public Collection<ColumnFamilyStore> getColumnFamilyStores()
  204.       {
  205. >         return Collections.unmodifiableCollection(columnFamilyStores.values());
  206.       }
  207.   

#178
src/java/org/apache/cassandra/db/Keyspace.java:213: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ColumnFamilyStore Keyspace.getColumnFamilyStore(TableId)' and 'Object ConcurrentMap.get(Object)' should be called atomically.
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213. >         return getColumnFamilyStore(table.id);
  214.       }
  215.   

#179
src/java/org/apache/cassandra/db/Keyspace.java:213: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Schema.getKeyspaceMetadata(String)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(TableId)' should be called atomically.
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213. >         return getColumnFamilyStore(table.id);
  214.       }
  215.   

#180
src/java/org/apache/cassandra/db/Keyspace.java:212: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Schema.getKeyspaceMetadata(String)' and 'String Keyspace.getName()' should be called atomically.
  210.           TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212. >             throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213.           return getColumnFamilyStore(table.id);
  214.       }

#181
src/java/org/apache/cassandra/db/Keyspace.java:212: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Keyspace.getName()' and 'String String.format(String,Object[])' should be called atomically.
  210.           TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212. >             throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213.           return getColumnFamilyStore(table.id);
  214.       }

#182
src/java/org/apache/cassandra/db/Keyspace.java:210: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Keyspace.getName()' and 'TableMetadata Schema.getTableMetadata(String,String)' should be called atomically.
  208.       public ColumnFamilyStore getColumnFamilyStore(String cfName)
  209.       {
  210. >         TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));

#183
src/java/org/apache/cassandra/db/Keyspace.java:213: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(TableId)' should be called atomically.
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213. >         return getColumnFamilyStore(table.id);
  214.       }
  215.   

#184
src/java/org/apache/cassandra/db/Keyspace.java:212: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' and 'String Keyspace.getName()' should be called atomically.
  210.           TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212. >             throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213.           return getColumnFamilyStore(table.id);
  214.       }

#185
src/java/org/apache/cassandra/db/Keyspace.java:213: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata Schema.getTableMetadata(String,String)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(TableId)' should be called atomically.
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213. >         return getColumnFamilyStore(table.id);
  214.       }
  215.   

#186
src/java/org/apache/cassandra/db/Keyspace.java:210: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata Schema.getTableMetadata(String,String)' and 'KeyspaceMetadata Schema.getKeyspaceMetadata(String)' should be called atomically.
  208.       public ColumnFamilyStore getColumnFamilyStore(String cfName)
  209.       {
  210. >         TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212.               throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));

#187
src/java/org/apache/cassandra/db/Keyspace.java:212: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata Schema.getTableMetadata(String,String)' and 'String Keyspace.getName()' should be called atomically.
  210.           TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
  211.           if (table == null)
  212. >             throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)", getName(), cfName));
  213.           return getColumnFamilyStore(table.id);
  214.       }

#188
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:221: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ChannelId Channel.id()' and 'StringBuilder StringBuilder.append(Object)' should be called atomically.
  219.   
  220.           if (channel != null)
  221. >                 sb.append(" channel: ").append(channel.id());
  222.   
  223.           sb.append(']');

#189
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:221: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(Object)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  219.   
  220.           if (channel != null)
  221. >                 sb.append(" channel: ").append(channel.id());
  222.   
  223.           sb.append(']');

#190
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:223: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(Object)' and 'StringBuilder StringBuilder.append(char)' should be called atomically.
  221.                   sb.append(" channel: ").append(channel.id());
  222.   
  223. >         sb.append(']');
  224.           return sb.toString();
  225.       }

#191
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:221: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(String)' and 'ChannelId Channel.id()' should be called atomically.
  219.   
  220.           if (channel != null)
  221. >                 sb.append(" channel: ").append(channel.id());
  222.   
  223.           sb.append(']');

#192
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:223: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(String)' and 'StringBuilder StringBuilder.append(char)' should be called atomically.
  221.                   sb.append(" channel: ").append(channel.id());
  222.   
  223. >         sb.append(']');
  224.           return sb.toString();
  225.       }

#193
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:218: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(String)' and 'UUID StreamSession.planId()' should be called atomically.
  216.   
  217.           if (session != null)
  218. >                 sb.append(" #").append(session.planId());
  219.   
  220.           if (channel != null)

#194
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:224: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StringBuilder StringBuilder.append(char)' and 'String StringBuilder.toString()' should be called atomically.
  222.   
  223.           sb.append(']');
  224. >         return sb.toString();
  225.       }
  226.   

#195
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:218: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'StringBuilder StringBuilder.append(Object)' should be called atomically.
  216.   
  217.           if (session != null)
  218. >                 sb.append(" #").append(session.planId());
  219.   
  220.           if (channel != null)

#196
src/java/org/apache/cassandra/db/Keyspace.java:220: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object ConcurrentMap.get(Object)' and 'String Object.makeConcatWithConstants(TableId)' should be called atomically.
  218.           ColumnFamilyStore cfs = columnFamilyStores.get(id);
  219.           if (cfs == null)
  220. >             throw new IllegalArgumentException("Unknown CF " + id);
  221.           return cfs;
  222.       }

#197
src/java/org/apache/cassandra/schema/Schema.java:227: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Keyspace.getName()' and 'Object Map.put(Object,Object)' should be called atomically.
  225.               throw new IllegalArgumentException(String.format("Keyspace %s was already initialized.", keyspace.getName()));
  226.   
  227. >         keyspaceInstances.put(keyspace.getName(), keyspace);
  228.       }
  229.   

#198
src/java/org/apache/cassandra/schema/Schema.java:225: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Keyspace.getName()' and 'String String.format(String,Object[])' should be called atomically.
  223.       {
  224.           if (keyspaceInstances.containsKey(keyspace.getName()))
  225. >             throw new IllegalArgumentException(String.format("Keyspace %s was already initialized.", keyspace.getName()));
  226.   
  227.           keyspaceInstances.put(keyspace.getName(), keyspace);

#199
src/java/org/apache/cassandra/schema/Schema.java:224: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Keyspace.getName()' and 'boolean Map.containsKey(Object)' should be called atomically.
  222.       public void storeKeyspaceInstance(Keyspace keyspace)
  223.       {
  224. >         if (keyspaceInstances.containsKey(keyspace.getName()))
  225.               throw new IllegalArgumentException(String.format("Keyspace %s was already initialized.", keyspace.getName()));
  226.   

#200
src/java/org/apache/cassandra/schema/Schema.java:225: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Map.containsKey(Object)' and 'String Keyspace.getName()' should be called atomically.
  223.       {
  224.           if (keyspaceInstances.containsKey(keyspace.getName()))
  225. >             throw new IllegalArgumentException(String.format("Keyspace %s was already initialized.", keyspace.getName()));
  226.   
  227.           keyspaceInstances.put(keyspace.getName(), keyspace);

#201
src/java/org/apache/cassandra/schema/Schema.java:227: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Map.containsKey(Object)' and 'String Keyspace.getName()' should be called atomically.
  225.               throw new IllegalArgumentException(String.format("Keyspace %s was already initialized.", keyspace.getName()));
  226.   
  227. >         keyspaceInstances.put(keyspace.getName(), keyspace);
  228.       }
  229.   

#202
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:246: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'GenericFutureListener NettyStreamingMessageSender.callsite_org.apache.cassandra.streaming.async.NettyStreamingMessageSender$Lambda$_15_108(NettyStreamingMessageSender,StreamMessage)' and 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' should be called atomically.
  244.           {
  245.               setupControlMessageChannel();
  246. >             sendControlMessage(controlMessageChannel, message, future -> onControlMessageComplete(future, message));
  247.           }
  248.           catch (Exception e)

#203
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:238: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  236.                   throw new RuntimeException("Cannot send stream data messages for preview streaming sessions");
  237.               if (logger.isDebugEnabled())
  238. >                 logger.debug("{} Sending {}", createLogTag(session, null), message);
  239.               fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;

#204
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:238: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  236.                   throw new RuntimeException("Cannot send stream data messages for preview streaming sessions");
  237.               if (logger.isDebugEnabled())
  238. >                 logger.debug("{} Sending {}", createLogTag(session, null), message);
  239.               fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;

#205
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:238: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StringBuilder.toString()' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  236.                   throw new RuntimeException("Cannot send stream data messages for preview streaming sessions");
  237.               if (logger.isDebugEnabled())
  238. >                 logger.debug("{} Sending {}", createLogTag(session, null), message);
  239.               fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;

#206
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:239: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'Future ThreadPoolExecutor.submit(Runnable)' should be called atomically.
  237.               if (logger.isDebugEnabled())
  238.                   logger.debug("{} Sending {}", createLogTag(session, null), message);
  239. >             fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;
  241.           }

#207
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:238: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  236.                   throw new RuntimeException("Cannot send stream data messages for preview streaming sessions");
  237.               if (logger.isDebugEnabled())
  238. >                 logger.debug("{} Sending {}", createLogTag(session, null), message);
  239.               fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;

#208
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:239: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.debug(String,Object,Object)' and 'Future ThreadPoolExecutor.submit(Runnable)' should be called atomically.
  237.               if (logger.isDebugEnabled())
  238.                   logger.debug("{} Sending {}", createLogTag(session, null), message);
  239. >             fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
  240.               return;
  241.           }

#209
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:246: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.scheduleKeepAliveTask(Channel)' and 'GenericFutureListener NettyStreamingMessageSender.callsite_org.apache.cassandra.streaming.async.NettyStreamingMessageSender$Lambda$_15_108(NettyStreamingMessageSender,StreamMessage)' should be called atomically.
  244.           {
  245.               setupControlMessageChannel();
  246. >             sendControlMessage(controlMessageChannel, message, future -> onControlMessageComplete(future, message));
  247.           }
  248.           catch (Exception e)

#210
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:246: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  244.           {
  245.               setupControlMessageChannel();
  246. >             sendControlMessage(controlMessageChannel, message, future -> onControlMessageComplete(future, message));
  247.           }
  248.           catch (Exception e)

#211
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:245: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.setupControlMessageChannel()' and 'Channel NettyStreamingMessageSender.createChannel(boolean)' should be called atomically.
  243.           try
  244.           {
  245. >             setupControlMessageChannel();
  246.               sendControlMessage(controlMessageChannel, message, future -> onControlMessageComplete(future, message));
  247.           }

#212
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:246: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.setupControlMessageChannel()' and 'GenericFutureListener NettyStreamingMessageSender.callsite_org.apache.cassandra.streaming.async.NettyStreamingMessageSender$Lambda$_15_108(NettyStreamingMessageSender,StreamMessage)' should be called atomically.
  244.           {
  245.               setupControlMessageChannel();
  246. >             sendControlMessage(controlMessageChannel, message, future -> onControlMessageComplete(future, message));
  247.           }
  248.           catch (Exception e)

#213
src/java/org/apache/cassandra/dht/Range.java:243: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'RingPosition RingPosition.minValue()' and 'boolean Range.isWrapAround()' should be called atomically.
  241.       {
  242.           T minValue = right.minValue();
  243. >         if (!isWrapAround() || right.equals(minValue))
  244.               return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);

#214
src/java/org/apache/cassandra/dht/Range.java:244: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'List Arrays.asList(Object[])' should be called atomically.
  242.           T minValue = right.minValue();
  243.           if (!isWrapAround() || right.equals(minValue))
  244. >             return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);
  246.           unwrapped.add(new Range<T>(left, minValue));

#215
src/java/org/apache/cassandra/dht/Range.java:243: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'boolean Range.isWrapAround(RingPosition,RingPosition)' should be called atomically.
  241.       {
  242.           T minValue = right.minValue();
  243. >         if (!isWrapAround() || right.equals(minValue))
  244.               return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);

#216
src/java/org/apache/cassandra/dht/Range.java:243: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround()' and 'boolean RingPosition.equals(Object)' should be called atomically.
  241.       {
  242.           T minValue = right.minValue();
  243. >         if (!isWrapAround() || right.equals(minValue))
  244.               return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);

#217
src/java/org/apache/cassandra/dht/Range.java:244: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'List Arrays.asList(Object[])' should be called atomically.
  242.           T minValue = right.minValue();
  243.           if (!isWrapAround() || right.equals(minValue))
  244. >             return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);
  246.           unwrapped.add(new Range<T>(left, minValue));

#218
src/java/org/apache/cassandra/dht/Range.java:243: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'boolean RingPosition.equals(Object)' should be called atomically.
  241.       {
  242.           T minValue = right.minValue();
  243. >         if (!isWrapAround() || right.equals(minValue))
  244.               return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);

#219
src/java/org/apache/cassandra/dht/Range.java:244: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean RingPosition.equals(Object)' and 'List Arrays.asList(Object[])' should be called atomically.
  242.           T minValue = right.minValue();
  243.           if (!isWrapAround() || right.equals(minValue))
  244. >             return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);
  246.           unwrapped.add(new Range<T>(left, minValue));

#220
src/java/org/apache/cassandra/dht/Range.java:246: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean RingPosition.equals(Object)' and 'boolean ArrayList.add(Object)' should be called atomically.
  244.               return Arrays.asList(this);
  245.           List<Range<T>> unwrapped = new ArrayList<Range<T>>(2);
  246. >         unwrapped.add(new Range<T>(left, minValue));
  247.           unwrapped.add(new Range<T>(minValue, right));
  248.           return unwrapped;

#221
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:250: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.get(Object)' and 'Object Map.put(Object,Object)' should be called atomically.
  248.           {
  249.               data = new HostStreamingData();
  250. >             peerSessions.put(peer, data);
  251.           }
  252.           return data;

#222
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:277: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ByteBuf ByteBuf.writerIndex(int)' and 'ChannelFuture AsyncChannelPromise.writeAndFlush(Channel,Object,GenericFutureListener)' should be called atomically.
  275.           buf.writerIndex(nioBuf.position());
  276.   
  277. >         AsyncChannelPromise.writeAndFlush(channel, buf, listener);
  278.       }
  279.   

#223
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:270: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ByteBuf ByteBufAllocator.directBuffer(int,int)' and 'ByteBuffer ByteBuf.nioBuffer(int,int)' should be called atomically.
  268.           // as control messages are (expected to be) small, we can simply allocate a ByteBuf here, wrap it, and send via the channel
  269.           ByteBuf buf = channel.alloc().directBuffer((int) messageSize, (int) messageSize);
  270. >         ByteBuffer nioBuf = buf.nioBuffer(0, (int) messageSize);
  271.           @SuppressWarnings("resource")
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);

#224
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:269: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ByteBufAllocator Channel.alloc()' and 'ByteBuf ByteBufAllocator.directBuffer(int,int)' should be called atomically.
  267.   
  268.           // as control messages are (expected to be) small, we can simply allocate a ByteBuf here, wrap it, and send via the channel
  269. >         ByteBuf buf = channel.alloc().directBuffer((int) messageSize, (int) messageSize);
  270.           ByteBuffer nioBuf = buf.nioBuffer(0, (int) messageSize);
  271.           @SuppressWarnings("resource")

#225
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:273: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ByteBuffer ByteBuf.nioBuffer(int,int)' and 'void StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' should be called atomically.
  271.           @SuppressWarnings("resource")
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);
  273. >         StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275.           buf.writerIndex(nioBuf.position());

#226
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:277: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ChannelFuture AsyncChannelPromise.writeAndFlush(Channel,Object,GenericFutureListener)' and 'AsyncChannelPromise AsyncChannelPromise.withListener(Channel,GenericFutureListener)' should be called atomically.
  275.           buf.writerIndex(nioBuf.position());
  276.   
  277. >         AsyncChannelPromise.writeAndFlush(channel, buf, listener);
  278.       }
  279.   

#227
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:264: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Long Long.valueOf(long)' and 'String String.format(String,Object[])' should be called atomically.
  262.           if (messageSize > 1 << 30)
  263.           {
  264. >             throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265.                                                             createLogTag(session, channel), messageSize, message.type));
  266.           }

#228
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:265: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'Long Long.valueOf(long)' should be called atomically.
  263.           {
  264.               throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265. >                                                           createLogTag(session, channel), messageSize, message.type));
  266.           }
  267.   

#229
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:258: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  256.       {
  257.           if (logger.isDebugEnabled())
  258. >             logger.debug("{} Sending {}", createLogTag(session, channel), message);
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.

#230
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:265: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  263.           {
  264.               throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265. >                                                           createLogTag(session, channel), messageSize, message.type));
  266.           }
  267.   

#231
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:258: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  256.       {
  257.           if (logger.isDebugEnabled())
  258. >             logger.debug("{} Sending {}", createLogTag(session, channel), message);
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.

#232
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:265: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StringBuilder.toString()' and 'Long Long.valueOf(long)' should be called atomically.
  263.           {
  264.               throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265. >                                                           createLogTag(session, channel), messageSize, message.type));
  266.           }
  267.   

#233
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:258: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StringBuilder.toString()' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  256.       {
  257.           if (logger.isDebugEnabled())
  258. >             logger.debug("{} Sending {}", createLogTag(session, channel), message);
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.

#234
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:258: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  256.       {
  257.           if (logger.isDebugEnabled())
  258. >             logger.debug("{} Sending {}", createLogTag(session, channel), message);
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.

#235
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:261: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'long StreamMessage.serializedSize(StreamMessage,int)' should be called atomically.
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.
  261. >         long messageSize = StreamMessage.serializedSize(message, streamingVersion);
  262.           if (messageSize > 1 << 30)
  263.           {

#236
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int ByteBuffer.limit()' and 'int ByteBuffer.position()' should be called atomically.
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275. >         buf.writerIndex(nioBuf.position());
  276.   
  277.           AsyncChannelPromise.writeAndFlush(channel, buf, listener);

#237
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int ByteBuffer.position()' and 'ByteBuf ByteBuf.writerIndex(int)' should be called atomically.
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275. >         buf.writerIndex(nioBuf.position());
  276.   
  277.           AsyncChannelPromise.writeAndFlush(channel, buf, listener);

#238
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:274: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int ByteBuffer.position()' and 'int ByteBuffer.limit()' should be called atomically.
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274. >         assert nioBuf.position() == nioBuf.limit();
  275.           buf.writerIndex(nioBuf.position());
  276.   

#239
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:269: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamMessage$Serializer.serializedSize(StreamMessage,int)' and 'ByteBufAllocator Channel.alloc()' should be called atomically.
  267.   
  268.           // as control messages are (expected to be) small, we can simply allocate a ByteBuf here, wrap it, and send via the channel
  269. >         ByteBuf buf = channel.alloc().directBuffer((int) messageSize, (int) messageSize);
  270.           ByteBuffer nioBuf = buf.nioBuffer(0, (int) messageSize);
  271.           @SuppressWarnings("resource")

#240
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:265: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamMessage$Serializer.serializedSize(StreamMessage,int)' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  263.           {
  264.               throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265. >                                                           createLogTag(session, channel), messageSize, message.type));
  266.           }
  267.   

#241
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:269: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamMessage.serializedSize(StreamMessage,int)' and 'ByteBufAllocator Channel.alloc()' should be called atomically.
  267.   
  268.           // as control messages are (expected to be) small, we can simply allocate a ByteBuf here, wrap it, and send via the channel
  269. >         ByteBuf buf = channel.alloc().directBuffer((int) messageSize, (int) messageSize);
  270.           ByteBuffer nioBuf = buf.nioBuffer(0, (int) messageSize);
  271.           @SuppressWarnings("resource")

#242
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:265: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamMessage.serializedSize(StreamMessage,int)' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  263.           {
  264.               throw new IllegalStateException(String.format("%s something is seriously wrong with the calculated stream control message's size: %d bytes, type is %s",
  265. >                                                           createLogTag(session, channel), messageSize, message.type));
  266.           }
  267.   

#243
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:261: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamMessage.serializedSize(StreamMessage,int)' and 'long StreamMessage$Serializer.serializedSize(StreamMessage,int)' should be called atomically.
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.
  261. >         long messageSize = StreamMessage.serializedSize(message, streamingVersion);
  262.           if (messageSize > 1 << 30)
  263.           {

#244
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:261: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.debug(String,Object,Object)' and 'long StreamMessage.serializedSize(StreamMessage,int)' should be called atomically.
  259.   
  260.           // we anticipate that the control messages are rather small, so allocating a ByteBuf shouldn't  blow out of memory.
  261. >         long messageSize = StreamMessage.serializedSize(message, streamingVersion);
  262.           if (messageSize > 1 << 30)
  263.           {

#245
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:274: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessage$Serializer.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' and 'int ByteBuffer.position()' should be called atomically.
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274. >         assert nioBuf.position() == nioBuf.limit();
  275.           buf.writerIndex(nioBuf.position());
  276.   

#246
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessage$Serializer.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' and 'int ByteBuffer.position()' should be called atomically.
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275. >         buf.writerIndex(nioBuf.position());
  276.   
  277.           AsyncChannelPromise.writeAndFlush(channel, buf, listener);

#247
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:274: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' and 'int ByteBuffer.position()' should be called atomically.
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274. >         assert nioBuf.position() == nioBuf.limit();
  275.           buf.writerIndex(nioBuf.position());
  276.   

#248
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' and 'int ByteBuffer.position()' should be called atomically.
  273.           StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275. >         buf.writerIndex(nioBuf.position());
  276.   
  277.           AsyncChannelPromise.writeAndFlush(channel, buf, listener);

#249
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:273: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)' and 'void DataOutputStreamPlus.writeByte(int)' should be called atomically.
  271.           @SuppressWarnings("resource")
  272.           DataOutputBufferFixed out = new DataOutputBufferFixed(nioBuf);
  273. >         StreamMessage.serialize(message, out, streamingVersion, session);
  274.           assert nioBuf.position() == nioBuf.limit();
  275.           buf.writerIndex(nioBuf.position());

#250
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Map.values()' and 'Iterator Collection.iterator()' should be called atomically.
  273.           public boolean hasActiveSessions()
  274.           {
  275. >             for (StreamSession session : streamSessions.values())
  276.               {
  277.                   if (!session.state().isFinalState())

#251
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  273.           public boolean hasActiveSessions()
  274.           {
  275. >             for (StreamSession session : streamSessions.values())
  276.               {
  277.                   if (!session.state().isFinalState())

#252
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:277: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'StreamSession$State StreamSession.state()' should be called atomically.
  275.               for (StreamSession session : streamSessions.values())
  276.               {
  277. >                 if (!session.state().isFinalState())
  278.                       return true;
  279.               }

#253
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:277: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSession$State StreamSession.state()' and 'boolean StreamSession$State.isFinalState()' should be called atomically.
  275.               for (StreamSession session : streamSessions.values())
  276.               {
  277. >                 if (!session.state().isFinalState())
  278.                       return true;
  279.               }

#254
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  273.           public boolean hasActiveSessions()
  274.           {
  275. >             for (StreamSession session : streamSessions.values())
  276.               {
  277.                   if (!session.state().isFinalState())

#255
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:275: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession$State.isFinalState()' and 'boolean Iterator.hasNext()' should be called atomically.
  273.           public boolean hasActiveSessions()
  274.           {
  275. >             for (StreamSession session : streamSessions.values())
  276.               {
  277.                   if (!session.state().isFinalState())

#256
src/java/org/apache/cassandra/streaming/StreamSession.java:282: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Map.containsKey(Object)' and 'Object Map.get(Object)' should be called atomically.
  280.       {
  281.           assert receivers.containsKey(tableId) : "Missing tableId " + tableId;
  282. >         return receivers.get(tableId).getReceiver();
  283.       }
  284.   

#257
src/java/org/apache/cassandra/streaming/StreamSession.java:281: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Map.containsKey(Object)' and 'String Object.makeConcatWithConstants(TableId)' should be called atomically.
  279.       public StreamReceiver getAggregator(TableId tableId)
  280.       {
  281. >         assert receivers.containsKey(tableId) : "Missing tableId " + tableId;
  282.           return receivers.get(tableId).getReceiver();
  283.       }

#258
src/java/org/apache/cassandra/schema/Schema.java:285: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Keyspaces.getNullable(String)' and 'KeyspaceMetadata VirtualKeyspaceRegistry.getKeyspaceMetadataNullable(String)' should be called atomically.
  283.           assert keyspaceName != null;
  284.           KeyspaceMetadata keyspace = keyspaces.getNullable(keyspaceName);
  285. >         return null != keyspace ? keyspace : VirtualKeyspaceRegistry.instance.getKeyspaceMetadataNullable(keyspaceName);
  286.       }
  287.   

#259
src/java/org/apache/cassandra/schema/Schema.java:284: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Keyspaces.getNullable(String)' and 'Object ImmutableMap.get(Object)' should be called atomically.
  282.       {
  283.           assert keyspaceName != null;
  284. >         KeyspaceMetadata keyspace = keyspaces.getNullable(keyspaceName);
  285.           return null != keyspace ? keyspace : VirtualKeyspaceRegistry.instance.getKeyspaceMetadataNullable(keyspaceName);
  286.       }

#260
src/java/org/apache/cassandra/schema/Schema.java:285: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata VirtualKeyspaceRegistry.getKeyspaceMetadataNullable(String)' and 'Object Map.get(Object)' should be called atomically.
  283.           assert keyspaceName != null;
  284.           KeyspaceMetadata keyspace = keyspaces.getNullable(keyspaceName);
  285. >         return null != keyspace ? keyspace : VirtualKeyspaceRegistry.instance.getKeyspaceMetadataNullable(keyspaceName);
  286.       }
  287.   

#261
src/java/org/apache/cassandra/schema/Schema.java:285: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object ImmutableMap.get(Object)' and 'KeyspaceMetadata VirtualKeyspaceRegistry.getKeyspaceMetadataNullable(String)' should be called atomically.
  283.           assert keyspaceName != null;
  284.           KeyspaceMetadata keyspace = keyspaces.getNullable(keyspaceName);
  285. >         return null != keyspace ? keyspace : VirtualKeyspaceRegistry.instance.getKeyspaceMetadataNullable(keyspaceName);
  286.       }
  287.   

#262
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:334: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Integer Integer.valueOf(int)' and 'Object Map.get(Object)' should be called atomically.
  332.           public void updateProgress(ProgressInfo info)
  333.           {
  334. >             sessionInfos.get(info.sessionIndex).updateProgress(info);
  335.           }
  336.   

#263
src/java/org/apache/cassandra/streaming/StreamCoordinator.java:339: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Integer Integer.valueOf(int)' and 'Object Map.put(Object,Object)' should be called atomically.
  337.           public void addSessionInfo(SessionInfo info)
  338.           {
  339. >             sessionInfos.put(info.sessionIndex, info);
  340.           }
  341.   

#264
src/java/org/apache/cassandra/streaming/StreamSession.java:347: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future StreamSession.closeSession(StreamSession$State)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  345.           {
  346.               logger.info("[Stream #{}] Session does not have any tasks.", planId());
  347. >             closeSession(State.COMPLETE);
  348.               return;
  349.           }

#265
src/java/org/apache/cassandra/streaming/StreamSession.java:346: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'void Logger.info(String,Object)' should be called atomically.
  344.           if (requests.isEmpty() && transfers.isEmpty())
  345.           {
  346. >             logger.info("[Stream #{}] Session does not have any tasks.", planId());
  347.               closeSession(State.COMPLETE);
  348.               return;

#266
src/java/org/apache/cassandra/streaming/StreamSession.java:353: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'void Logger.info(String,Object[])' should be called atomically.
  351.           try
  352.           {
  353. >             logger.info("[Stream #{}] Starting streaming to {}{}", planId(),
  354.                                                                      peer,
  355.                                                                      template.connectTo == null ? "" : " through " + template.connectTo);

#267
src/java/org/apache/cassandra/streaming/StreamSession.java:346: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean NonBlockingHashMap.isEmpty()' and 'UUID StreamSession.planId()' should be called atomically.
  344.           if (requests.isEmpty() && transfers.isEmpty())
  345.           {
  346. >             logger.info("[Stream #{}] Session does not have any tasks.", planId());
  347.               closeSession(State.COMPLETE);
  348.               return;

#268
src/java/org/apache/cassandra/streaming/StreamSession.java:353: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean NonBlockingHashMap.isEmpty()' and 'UUID StreamSession.planId()' should be called atomically.
  351.           try
  352.           {
  353. >             logger.info("[Stream #{}] Starting streaming to {}{}", planId(),
  354.                                                                      peer,
  355.                                                                      template.connectTo == null ? "" : " through " + template.connectTo);

#269
src/java/org/apache/cassandra/streaming/StreamSession.java:347: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.info(String,Object)' and 'Future StreamSession.closeSession(StreamSession$State)' should be called atomically.
  345.           {
  346.               logger.info("[Stream #{}] Session does not have any tasks.", planId());
  347. >             closeSession(State.COMPLETE);
  348.               return;
  349.           }

#270
src/java/org/apache/cassandra/utils/FBUtilities.java:402: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List FBUtilities.waitOnFutures(Iterable,long,TimeUnit)' and 'Iterator Iterable.iterator()' should be called atomically.
  400.       public static <T> List<T> waitOnFutures(Iterable<? extends Future<? extends T>> futures)
  401.       {
  402. >         return waitOnFutures(futures, -1, null);
  403.       }
  404.   

#271
src/java/org/apache/cassandra/utils/FBUtilities.java:402: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List FBUtilities.waitOnFutures(Iterable,long,TimeUnit)' and 'long System.nanoTime()' should be called atomically.
  400.       public static <T> List<T> waitOnFutures(Iterable<? extends Future<? extends T>> futures)
  401.       {
  402. >         return waitOnFutures(futures, -1, null);
  403.       }
  404.   

#272
src/java/org/apache/cassandra/schema/Schema.java:412: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Keyspaces.getNullable(String)' and 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' should be called atomically.
  410.           return ksm == null
  411.                ? null
  412. >              : ksm.getTableOrViewNullable(table);
  413.       }
  414.   

#273
src/java/org/apache/cassandra/schema/Schema.java:409: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Schema.getKeyspaceMetadata(String)' and 'KeyspaceMetadata Keyspaces.getNullable(String)' should be called atomically.
  407.           assert table != null;
  408.   
  409. >         KeyspaceMetadata ksm = getKeyspaceMetadata(keyspace);
  410.           return ksm == null
  411.                ? null

#274
src/java/org/apache/cassandra/schema/Schema.java:412: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata Schema.getKeyspaceMetadata(String)' and 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' should be called atomically.
  410.           return ksm == null
  411.                ? null
  412. >              : ksm.getTableOrViewNullable(table);
  413.       }
  414.   

#275
src/java/org/apache/cassandra/schema/Schema.java:412: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'KeyspaceMetadata VirtualKeyspaceRegistry.getKeyspaceMetadataNullable(String)' and 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' should be called atomically.
  410.           return ksm == null
  411.                ? null
  412. >              : ksm.getTableOrViewNullable(table);
  413.       }
  414.   

#276
src/java/org/apache/cassandra/schema/Schema.java:412: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableMetadata KeyspaceMetadata.getTableOrViewNullable(String)' and 'ViewMetadata Views.getNullable(String)' should be called atomically.
  410.           return ksm == null
  411.                ? null
  412. >              : ksm.getTableOrViewNullable(table);
  413.       }
  414.   

#277
src/java/org/apache/cassandra/utils/FBUtilities.java:420: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Iterable.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  418.           List<T> results = new ArrayList<>();
  419.           Throwable fail = null;
  420. >         for (Future<? extends T> f : futures)
  421.           {
  422.               try

#278
src/java/org/apache/cassandra/utils/FBUtilities.java:426: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Future.get()' and 'boolean ArrayList.add(Object)' should be called atomically.
  424.                   if (endNanos == 0)
  425.                   {
  426. >                     results.add(f.get());
  427.                   }
  428.                   else

#279
src/java/org/apache/cassandra/utils/FBUtilities.java:431: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Future.get(long,TimeUnit)' and 'boolean ArrayList.add(Object)' should be called atomically.
  429.                   {
  430.                       long waitFor = Math.max(1, endNanos - System.nanoTime());
  431. >                     results.add(f.get(waitFor, TimeUnit.NANOSECONDS));
  432.                   }
  433.               }

#280
src/java/org/apache/cassandra/utils/FBUtilities.java:426: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Object Future.get()' should be called atomically.
  424.                   if (endNanos == 0)
  425.                   {
  426. >                     results.add(f.get());
  427.                   }
  428.                   else

#281
src/java/org/apache/cassandra/utils/FBUtilities.java:430: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'long System.nanoTime()' should be called atomically.
  428.                   else
  429.                   {
  430. >                     long waitFor = Math.max(1, endNanos - System.nanoTime());
  431.                       results.add(f.get(waitFor, TimeUnit.NANOSECONDS));
  432.                   }

#282
src/java/org/apache/cassandra/utils/FBUtilities.java:420: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  418.           List<T> results = new ArrayList<>();
  419.           Throwable fail = null;
  420. >         for (Future<? extends T> f : futures)
  421.           {
  422.               try

#283
src/java/org/apache/cassandra/utils/FBUtilities.java:420: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  418.           List<T> results = new ArrayList<>();
  419.           Throwable fail = null;
  420. >         for (Future<? extends T> f : futures)
  421.           {
  422.               try

#284
src/java/org/apache/cassandra/utils/FBUtilities.java:439: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'void Throwables.maybeFail(Throwable)' should be called atomically.
  437.               }
  438.           }
  439. >         Throwables.maybeFail(fail);
  440.           return results;
  441.       }

#285
src/java/org/apache/cassandra/utils/FBUtilities.java:431: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long Math.max(long,long)' and 'Object Future.get(long,TimeUnit)' should be called atomically.
  429.                   {
  430.                       long waitFor = Math.max(1, endNanos - System.nanoTime());
  431. >                     results.add(f.get(waitFor, TimeUnit.NANOSECONDS));
  432.                   }
  433.               }

#286
src/java/org/apache/cassandra/utils/FBUtilities.java:430: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long System.nanoTime()' and 'long Math.max(long,long)' should be called atomically.
  428.                   else
  429.                   {
  430. >                     long waitFor = Math.max(1, endNanos - System.nanoTime());
  431.                       results.add(f.get(waitFor, TimeUnit.NANOSECONDS));
  432.                   }

#287
src/java/org/apache/cassandra/utils/FBUtilities.java:417: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long System.nanoTime()' and 'long TimeUnit.toNanos(long)' should be called atomically.
  415.           long endNanos = 0;
  416.           if (timeout > 0)
  417. >             endNanos = System.nanoTime() + units.toNanos(timeout);
  418.           List<T> results = new ArrayList<>();
  419.           Throwable fail = null;

#288
src/java/org/apache/cassandra/utils/FBUtilities.java:420: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long TimeUnit.toNanos(long)' and 'Iterator Iterable.iterator()' should be called atomically.
  418.           List<T> results = new ArrayList<>();
  419.           Throwable fail = null;
  420. >         for (Future<? extends T> f : futures)
  421.           {
  422.               try

#289
src/java/org/apache/cassandra/utils/FBUtilities.java:439: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Throwables.maybeFail(Throwable)' and 'boolean Throwables.failIfCanCast(Throwable,Class)' should be called atomically.
  437.               }
  438.           }
  439. >         Throwables.maybeFail(fail);
  440.           return results;
  441.       }

#290
src/java/org/apache/cassandra/streaming/StreamSession.java:419: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSession$State StreamSession.state()' and 'String StreamSession$State.name()' should be called atomically.
  417.       {
  418.           if (state().isFinalState())
  419. >             throw new RuntimeException(String.format("Stream %s is finished with state %s", planId(), state().name()));
  420.       }
  421.   

#291
src/java/org/apache/cassandra/streaming/StreamSession.java:418: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSession$State StreamSession.state()' and 'boolean StreamSession$State.isFinalState()' should be called atomically.
  416.       private void failIfFinished()
  417.       {
  418. >         if (state().isFinalState())
  419.               throw new RuntimeException(String.format("Stream %s is finished with state %s", planId(), state().name()));
  420.       }

#292
src/java/org/apache/cassandra/streaming/StreamSession.java:419: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StreamSession$State.name()' and 'String String.format(String,Object[])' should be called atomically.
  417.       {
  418.           if (state().isFinalState())
  419. >             throw new RuntimeException(String.format("Stream %s is finished with state %s", planId(), state().name()));
  420.       }
  421.   

#293
src/java/org/apache/cassandra/streaming/StreamSession.java:419: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'StreamSession$State StreamSession.state()' should be called atomically.
  417.       {
  418.           if (state().isFinalState())
  419. >             throw new RuntimeException(String.format("Stream %s is finished with state %s", planId(), state().name()));
  420.       }
  421.   

#294
src/java/org/apache/cassandra/streaming/StreamSession.java:419: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession$State.isFinalState()' and 'UUID StreamSession.planId()' should be called atomically.
  417.       {
  418.           if (state().isFinalState())
  419. >             throw new RuntimeException(String.format("Stream %s is finished with state %s", planId(), state().name()));
  420.       }
  421.   

#295
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Collections.unmodifiableCollection(Collection)' and 'boolean HashSet.addAll(Collection)' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#296
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Keyspace.getColumnFamilyStores()' and 'Collection ConcurrentMap.values()' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#297
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Keyspace.getColumnFamilyStores()' and 'boolean HashSet.addAll(Collection)' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#298
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ColumnFamilyStore Keyspace.getColumnFamilyStore(String)' and 'String Keyspace.getName()' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#299
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ColumnFamilyStore Keyspace.getColumnFamilyStore(String)' and 'boolean HashSet.add(Object)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#300
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ColumnFamilyStore Keyspace.getColumnFamilyStore(TableId)' and 'boolean HashSet.add(Object)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#301
src/java/org/apache/cassandra/streaming/StreamSession.java:432: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  430.           else
  431.           {
  432. >             for (String cf : columnFamilies)
  433.                   stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }

#302
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'Collection Keyspace.getColumnFamilyStores()' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#303
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(String)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#304
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'Keyspace Keyspace.open(String,Schema,boolean)' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#305
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'Keyspace Keyspace.open(String,Schema,boolean)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#306
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'boolean SchemaConstants.isLocalSystemKeyspace(String)' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#307
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String)' and 'boolean SchemaConstants.isLocalSystemKeyspace(String)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#308
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String,Schema,boolean)' and 'Collection Keyspace.getColumnFamilyStores()' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#309
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Keyspace Keyspace.open(String,Schema,boolean)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(String)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#310
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Keyspace Keyspace.open(String)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#311
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String String.format(String,Object[])' and 'boolean HashSet.add(Object)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#312
src/java/org/apache/cassandra/streaming/StreamSession.java:432: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'Iterator Collection.iterator()' should be called atomically.
  430.           else
  431.           {
  432. >             for (String cf : columnFamilies)
  433.                   stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }

#313
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'Keyspace Keyspace.open(String)' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#314
src/java/org/apache/cassandra/streaming/StreamSession.java:432: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean HashSet.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  430.           else
  431.           {
  432. >             for (String cf : columnFamilies)
  433.                   stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }

#315
src/java/org/apache/cassandra/streaming/StreamSession.java:432: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  430.           else
  431.           {
  432. >             for (String cf : columnFamilies)
  433.                   stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }

#316
src/java/org/apache/cassandra/streaming/StreamSession.java:428: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean SchemaConstants.isLocalSystemKeyspace(String)' and 'Collection Keyspace.getColumnFamilyStores()' should be called atomically.
  426.           if (columnFamilies.isEmpty())
  427.           {
  428. >             stores.addAll(Keyspace.open(keyspace).getColumnFamilyStores());
  429.           }
  430.           else

#317
src/java/org/apache/cassandra/streaming/StreamSession.java:433: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean SchemaConstants.isLocalSystemKeyspace(String)' and 'ColumnFamilyStore Keyspace.getColumnFamilyStore(String)' should be called atomically.
  431.           {
  432.               for (String cf : columnFamilies)
  433. >                 stores.add(Keyspace.open(keyspace).getColumnFamilyStore(cf));
  434.           }
  435.           return stores;

#318
src/java/org/apache/cassandra/dht/Range.java:439: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Range.isWrapAround(RingPosition,RingPosition)' and 'int RingPosition.compareTo(Object)' should be called atomically.
  437.       public boolean isWrapAround()
  438.       {
  439. >         return isWrapAround(left, right);
  440.       }
  441.   

#319
src/java/org/apache/cassandra/streaming/StreamSession.java:446: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection TableStreamManager.createOutgoingStreams(StreamSession,RangesAtEndpoint,UUID,PreviewKind)' and 'boolean ArrayList.addAll(Collection)' should be called atomically.
  444.               for (ColumnFamilyStore cfs: stores)
  445.               {
  446. >                 streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));
  447.               }
  448.           }

#320
src/java/org/apache/cassandra/streaming/StreamSession.java:444: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  442.           try
  443.           {
  444. >             for (ColumnFamilyStore cfs: stores)
  445.               {
  446.                   streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));

#321
src/java/org/apache/cassandra/streaming/StreamSession.java:446: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'TableStreamManager ColumnFamilyStore.getStreamManager()' should be called atomically.
  444.               for (ColumnFamilyStore cfs: stores)
  445.               {
  446. >                 streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));
  447.               }
  448.           }

#322
src/java/org/apache/cassandra/streaming/StreamSession.java:446: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableStreamManager ColumnFamilyStore.getStreamManager()' and 'Collection TableStreamManager.createOutgoingStreams(StreamSession,RangesAtEndpoint,UUID,PreviewKind)' should be called atomically.
  444.               for (ColumnFamilyStore cfs: stores)
  445.               {
  446. >                 streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));
  447.               }
  448.           }

#323
src/java/org/apache/cassandra/streaming/StreamSession.java:444: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.addAll(Collection)' and 'boolean Iterator.hasNext()' should be called atomically.
  442.           try
  443.           {
  444. >             for (ColumnFamilyStore cfs: stores)
  445.               {
  446.                   streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));

#324
src/java/org/apache/cassandra/streaming/StreamSession.java:444: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  442.           try
  443.           {
  444. >             for (ColumnFamilyStore cfs: stores)
  445.               {
  446.                   streams.addAll(cfs.getStreamManager().createOutgoingStreams(this, replicas, pendingRepair, previewKind));

#325
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#326
src/java/org/apache/cassandra/streaming/StreamSession.java:463: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'TableId OutgoingStream.getTableId()' should be called atomically.
  461.           for (OutgoingStream stream: streams)
  462.           {
  463. >             TableId tableId = stream.getTableId();
  464.               StreamTransferTask task = transfers.get(tableId);
  465.               if (task == null)

#327
src/java/org/apache/cassandra/streaming/StreamSession.java:470: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object NonBlockingHashMap.get(Object)' and 'Object NonBlockingHashMap.put(Object,Object)' should be called atomically.
  468.                   StreamTransferTask newTask = new StreamTransferTask(this, tableId);
  469.                   // task = transfers.putIfAbsent(tableId, newTask);
  470. >                 task = transfers.put(tableId, newTask);
  471.                   if (task == null)
  472.                       task = newTask;

#328
src/java/org/apache/cassandra/streaming/StreamSession.java:474: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object NonBlockingHashMap.get(Object)' and 'void StreamTransferTask.addTransferStream(OutgoingStream)' should be called atomically.
  472.                       task = newTask;
  473.               }
  474. >             task.addTransferStream(stream);
  475.           }
  476.       }

#329
src/java/org/apache/cassandra/streaming/StreamSession.java:474: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object NonBlockingHashMap.put(Object,Object)' and 'void StreamTransferTask.addTransferStream(OutgoingStream)' should be called atomically.
  472.                       task = newTask;
  473.               }
  474. >             task.addTransferStream(stream);
  475.           }
  476.       }

#330
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String String.format(String,Object[])' and 'Iterator Collection.iterator()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#331
src/java/org/apache/cassandra/streaming/StreamSession.java:464: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'TableId OutgoingStream.getTableId()' and 'Object NonBlockingHashMap.get(Object)' should be called atomically.
  462.           {
  463.               TableId tableId = stream.getTableId();
  464. >             StreamTransferTask task = transfers.get(tableId);
  465.               if (task == null)
  466.               {

#332
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#333
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession$State.isFinalState()' and 'Iterator Collection.iterator()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#334
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int OutgoingStream.getNumFiles()' and 'boolean Iterator.hasNext()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#335
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.failIfFinished()' and 'Iterator Collection.iterator()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#336
src/java/org/apache/cassandra/streaming/StreamSession.java:460: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.failIfFinished()' and 'StreamSession$State StreamSession.state()' should be called atomically.
  458.       void addTransferStreams(Collection<OutgoingStream> streams)
  459.       {
  460. >         failIfFinished();
  461.           for (OutgoingStream stream: streams)
  462.           {

#337
src/java/org/apache/cassandra/streaming/StreamSession.java:474: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamTransferTask.addTransferStream(OutgoingStream)' and 'TableId OutgoingStream.getTableId()' should be called atomically.
  472.                       task = newTask;
  473.               }
  474. >             task.addTransferStream(stream);
  475.           }
  476.       }

#338
src/java/org/apache/cassandra/streaming/StreamSession.java:461: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamTransferTask.addTransferStream(OutgoingStream)' and 'boolean Iterator.hasNext()' should be called atomically.
  459.       {
  460.           failIfFinished();
  461. >         for (OutgoingStream stream: streams)
  462.           {
  463.               TableId tableId = stream.getTableId();

#339
src/java/org/apache/cassandra/utils/FBUtilities.java:501: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'CompletableFuture CompletableFuture.completedFuture(Object)' should be called atomically.
  499.       {
  500.           if (futures.isEmpty())
  501. >             return CompletableFuture.completedFuture(null);
  502.   
  503.           return new Future<List>()

#340
src/java/org/apache/cassandra/streaming/StreamSession.java:513: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Collection.forEach(Consumer)' and 'Collection NonBlockingHashMap.values()' should be called atomically.
  511.           {
  512.               receivers.values().forEach(StreamReceiveTask::abort);
  513. >             transfers.values().forEach(StreamTransferTask::abort);
  514.           }
  515.           catch (Exception e)

#341
src/java/org/apache/cassandra/streaming/StreamSession.java:529: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'void Logger.trace(String,Object[])' should be called atomically.
  527.       {
  528.           if (logger.isTraceEnabled())
  529. >             logger.trace("[Stream #{}] Changing session state from {} to {}", planId(), state, newState);
  530.   
  531.           sink.recordState(peer, newState);

#342
src/java/org/apache/cassandra/streaming/StreamSession.java:529: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isTraceEnabled()' and 'UUID StreamSession.planId()' should be called atomically.
  527.       {
  528.           if (logger.isTraceEnabled())
  529. >             logger.trace("[Stream #{}] Changing session state from {} to {}", planId(), state, newState);
  530.   
  531.           sink.recordState(peer, newState);

#343
src/java/org/apache/cassandra/streaming/StreamSession.java:531: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isTraceEnabled()' and 'void StreamSession$MessageStateSink.recordState(InetAddressAndPort,StreamSession$State)' should be called atomically.
  529.               logger.trace("[Stream #{}] Changing session state from {} to {}", planId(), state, newState);
  530.   
  531. >         sink.recordState(peer, newState);
  532.           state = newState;
  533.       }

#344
src/java/org/apache/cassandra/streaming/StreamSession.java:531: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.trace(String,Object[])' and 'void StreamSession$MessageStateSink.recordState(InetAddressAndPort,StreamSession$State)' should be called atomically.
  529.               logger.trace("[Stream #{}] Changing session state from {} to {}", planId(), state, newState);
  530.   
  531. >         sink.recordState(peer, newState);
  532.           state = newState;
  533.       }

#345
src/java/org/apache/cassandra/locator/AbstractReplicaCollection.java:542: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int AbstractReplicaCollection$ReplicaList.size()' and 'int AbstractReplicaCollection.size()' should be called atomically.
  540.           if (replicas.isEmpty())
  541.               return extraReplicas;
  542. >         Builder<C> builder = replicas.newBuilder(replicas.size() + extraReplicas.size());
  543.           builder.addAll(replicas, Builder.Conflict.NONE);
  544.           builder.addAll(extraReplicas, ignoreConflicts);

#346
src/java/org/apache/cassandra/locator/AbstractReplicaCollection.java:542: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int AbstractReplicaCollection.size()' and 'int AbstractReplicaCollection$ReplicaList.size()' should be called atomically.
  540.           if (replicas.isEmpty())
  541.               return extraReplicas;
  542. >         Builder<C> builder = replicas.newBuilder(replicas.size() + extraReplicas.size());
  543.           builder.addAll(replicas, Builder.Conflict.NONE);
  544.           builder.addAll(extraReplicas, ignoreConflicts);

#347
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:554: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  552.           if (logger.isDebugEnabled())
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554. >         for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556.           channelKeepAlives.clear();

#348
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:555: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'boolean ScheduledFuture.cancel(boolean)' should be called atomically.
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555. >             future.cancel(false);
  556.           channelKeepAlives.clear();
  557.   

#349
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:553: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'StringBuilder StringBuilder.append(String)' should be called atomically.
  551.           closed = true;
  552.           if (logger.isDebugEnabled())
  553. >             logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);

#350
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:553: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  551.           closed = true;
  552.           if (logger.isDebugEnabled())
  553. >             logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);

#351
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:553: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String StringBuilder.toString()' and 'void Logger.debug(String,Object,Object)' should be called atomically.
  551.           closed = true;
  552.           if (logger.isDebugEnabled())
  553. >             logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);

#352
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:554: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  552.           if (logger.isDebugEnabled())
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554. >         for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556.           channelKeepAlives.clear();

#353
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:556: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'void Collection.clear()' should be called atomically.
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556. >         channelKeepAlives.clear();
  557.   
  558.           threadToChannelMap.clear();

#354
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:554: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'Iterator Collection.iterator()' should be called atomically.
  552.           if (logger.isDebugEnabled())
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554. >         for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556.           channelKeepAlives.clear();

#355
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:553: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Logger.isDebugEnabled()' and 'String NettyStreamingMessageSender.createLogTag(StreamSession,Channel)' should be called atomically.
  551.           closed = true;
  552.           if (logger.isDebugEnabled())
  553. >             logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554.           for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);

#356
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:554: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ScheduledFuture.cancel(boolean)' and 'boolean Iterator.hasNext()' should be called atomically.
  552.           if (logger.isDebugEnabled())
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554. >         for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556.           channelKeepAlives.clear();

#357
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:558: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Collection.clear()' and 'void ConcurrentMap.clear()' should be called atomically.
  556.           channelKeepAlives.clear();
  557.   
  558. >         threadToChannelMap.clear();
  559.           fileTransferExecutor.shutdownNow();
  560.       }

#358
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:559: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void ConcurrentMap.clear()' and 'List ThreadPoolExecutor.shutdownNow()' should be called atomically.
  557.   
  558.           threadToChannelMap.clear();
  559. >         fileTransferExecutor.shutdownNow();
  560.       }
  561.   }

#359
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:554: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.debug(String,Object,Object)' and 'Iterator Collection.iterator()' should be called atomically.
  552.           if (logger.isDebugEnabled())
  553.               logger.debug("{} Closing stream connection channels on {}", createLogTag(session, null), template.to);
  554. >         for (ScheduledFuture<?> future : channelKeepAlives)
  555.               future.cancel(false);
  556.           channelKeepAlives.clear();

#360
src/java/org/apache/cassandra/streaming/StreamSession.java:616: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection NonBlockingHashMap.values()' and 'Iterator Collection.iterator()' should be called atomically.
  614.           long totalBytesToStream = 0;
  615.           long totalSSTablesStreamed = 0;
  616. >         for (StreamTransferTask task : transfers.values())
  617.           {
  618.               totalBytesToStream += task.getTotalSize();

#361
src/java/org/apache/cassandra/streaming/StreamSession.java:616: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  614.           long totalBytesToStream = 0;
  615.           long totalSSTablesStreamed = 0;
  616. >         for (StreamTransferTask task : transfers.values())
  617.           {
  618.               totalBytesToStream += task.getTotalSize();

#362
src/java/org/apache/cassandra/streaming/StreamSession.java:620: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'boolean Collection.add(Object)' should be called atomically.
  618.               totalBytesToStream += task.getTotalSize();
  619.               totalSSTablesStreamed += task.getTotalNumberOfFiles();
  620. >             prepare.summaries.add(task.getSummary());
  621.           }
  622.   

#363
src/java/org/apache/cassandra/streaming/StreamSession.java:620: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'int StreamTask.getTotalNumberOfFiles()' should be called atomically.
  618.               totalBytesToStream += task.getTotalSize();
  619.               totalSSTablesStreamed += task.getTotalNumberOfFiles();
  620. >             prepare.summaries.add(task.getSummary());
  621.           }
  622.   

#364
src/java/org/apache/cassandra/streaming/StreamSession.java:616: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  614.           long totalBytesToStream = 0;
  615.           long totalSSTablesStreamed = 0;
  616. >         for (StreamTransferTask task : transfers.values())
  617.           {
  618.               totalBytesToStream += task.getTotalSize();

#365
src/java/org/apache/cassandra/streaming/StreamSession.java:616: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  614.           long totalBytesToStream = 0;
  615.           long totalSSTablesStreamed = 0;
  616. >         for (StreamTransferTask task : transfers.values())
  617.           {
  618.               totalBytesToStream += task.getTotalSize();

#366
src/java/org/apache/cassandra/streaming/StreamSession.java:620: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamTask.getTotalSize()' and 'boolean Collection.add(Object)' should be called atomically.
  618.               totalBytesToStream += task.getTotalSize();
  619.               totalSSTablesStreamed += task.getTotalNumberOfFiles();
  620. >             prepare.summaries.add(task.getSummary());
  621.           }
  622.   

#367
src/java/org/apache/cassandra/streaming/StreamSession.java:629: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Counter.inc(long)' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  627.           }
  628.   
  629. >         messageSender.sendMessage(prepare);
  630.       }
  631.   

#368
src/java/org/apache/cassandra/streaming/StreamSession.java:629: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  627.           }
  628.   
  629. >         messageSender.sendMessage(prepare);
  630.       }
  631.   

#369
src/java/org/apache/cassandra/streaming/StreamSession.java:629: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  627.           }
  628.   
  629. >         messageSender.sendMessage(prepare);
  630.       }
  631.   

#370
src/java/org/apache/cassandra/streaming/StreamSession.java:629: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  627.           }
  628.   
  629. >         messageSender.sendMessage(prepare);
  630.       }
  631.   

#371
src/java/org/apache/cassandra/streaming/StreamSession.java:611: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'boolean Logger.isTraceEnabled()' should be called atomically.
  609.       {
  610.           // send prepare message
  611. >         state(State.PREPARING);
  612.           PrepareSynMessage prepare = new PrepareSynMessage();
  613.           prepare.requests.addAll(requests);

#372
src/java/org/apache/cassandra/streaming/StreamSession.java:671: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Integer Integer.valueOf(int)' and 'void Logger.error(String,Object[])' should be called atomically.
  669.           if (e instanceof SocketTimeoutException)
  670.           {
  671. >             logger.error("[Stream #{}] Did not receive response from peer {}{} for {} secs. Is peer down? " +
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),

#373
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#374
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#375
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#376
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#377
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#378
src/java/org/apache/cassandra/streaming/StreamSession.java:680: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddress.getHostAddress()' and 'void Logger.error(String,Object[])' should be called atomically.
  678.           else
  679.           {
  680. >             logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),

#379
src/java/org/apache/cassandra/streaming/StreamSession.java:673: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddress.getHostAddress()' should be called atomically.
  671.               logger.error("[Stream #{}] Did not receive response from peer {}{} for {} secs. Is peer down? " +
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673. >                          peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),

#380
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddress.getHostAddress()' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#381
src/java/org/apache/cassandra/streaming/StreamSession.java:681: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddress.getHostAddress()' should be called atomically.
  679.           {
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681. >                          peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);

#382
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddress.getHostAddress()' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#383
src/java/org/apache/cassandra/streaming/StreamSession.java:673: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddressAndPort.toString()' should be called atomically.
  671.               logger.error("[Stream #{}] Did not receive response from peer {}{} for {} secs. Is peer down? " +
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673. >                          peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),

#384
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddressAndPort.toString()' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#385
src/java/org/apache/cassandra/streaming/StreamSession.java:681: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddressAndPort.toString()' should be called atomically.
  679.           {
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681. >                          peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);

#386
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String InetAddressAndPort.toString()' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#387
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#388
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#389
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#390
src/java/org/apache/cassandra/streaming/StreamSession.java:680: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.getHostAddress(boolean)' and 'void Logger.error(String,Object[])' should be called atomically.
  678.           else
  679.           {
  680. >             logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),

#391
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#392
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#393
src/java/org/apache/cassandra/streaming/StreamSession.java:674: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673.                            peer.getHostAddress(true),
  674. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);

#394
src/java/org/apache/cassandra/streaming/StreamSession.java:682: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String Object.makeConcatWithConstants(String)' should be called atomically.
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682. >                          template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);
  684.           }

#395
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#396
src/java/org/apache/cassandra/streaming/StreamSession.java:680: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'void Logger.error(String,Object[])' should be called atomically.
  678.           else
  679.           {
  680. >             logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),

#397
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(String)' and 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#398
src/java/org/apache/cassandra/streaming/StreamSession.java:680: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(String)' and 'void Logger.error(String,Object[])' should be called atomically.
  678.           else
  679.           {
  680. >             logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681.                            peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),

#399
src/java/org/apache/cassandra/streaming/StreamSession.java:673: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  671.               logger.error("[Stream #{}] Did not receive response from peer {}{} for {} secs. Is peer down? " +
  672.                            "If not, maybe try increasing streaming_keep_alive_period_in_secs.", planId(),
  673. >                          peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675.                            2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),

#400
src/java/org/apache/cassandra/streaming/StreamSession.java:681: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String InetAddressAndPort.getHostAddress(boolean)' should be called atomically.
  679.           {
  680.               logger.error("[Stream #{}] Streaming error occurred on session with peer {}{}", planId(),
  681. >                          peer.getHostAddress(true),
  682.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  683.                            e);

#401
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' and 'Integer Integer.valueOf(int)' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#402
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int DatabaseDescriptor.getStreamingKeepAlivePeriod()' and 'int Integer.intValue()' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#403
src/java/org/apache/cassandra/streaming/StreamSession.java:675: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int Integer.intValue()' and 'Integer Integer.valueOf(int)' should be called atomically.
  673.                            peer.getHostAddress(true),
  674.                            template.connectTo == null ? "" : " through " + template.connectTo.getHostAddress(true),
  675. >                          2 * DatabaseDescriptor.getStreamingKeepAlivePeriod(),
  676.                            e);
  677.           }

#404
src/java/org/apache/cassandra/streaming/StreamSession.java:694: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Runnable StreamSession.callsite_org.apache.cassandra.streaming.StreamSession$Lambda$_45_13(StreamSession,Collection,Collection)' and 'void DebuggableScheduledThreadPoolExecutor.execute(Runnable)' should be called atomically.
  692.           // prepare tasks
  693.           state(State.PREPARING);
  694. >         ScheduledExecutors.nonPeriodicTasks.execute(() -> prepareAsync(requests, summaries));
  695.       }
  696.   

#405
src/java/org/apache/cassandra/streaming/StreamSession.java:694: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession$MessageStateSink.recordState(InetAddressAndPort,StreamSession$State)' and 'Runnable StreamSession.callsite_org.apache.cassandra.streaming.StreamSession$Lambda$_45_13(StreamSession,Collection,Collection)' should be called atomically.
  692.           // prepare tasks
  693.           state(State.PREPARING);
  694. >         ScheduledExecutors.nonPeriodicTasks.execute(() -> prepareAsync(requests, summaries));
  695.       }
  696.   

#406
src/java/org/apache/cassandra/streaming/StreamSession.java:694: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'Runnable StreamSession.callsite_org.apache.cassandra.streaming.StreamSession$Lambda$_45_13(StreamSession,Collection,Collection)' should be called atomically.
  692.           // prepare tasks
  693.           state(State.PREPARING);
  694. >         ScheduledExecutors.nonPeriodicTasks.execute(() -> prepareAsync(requests, summaries));
  695.       }
  696.   

#407
src/java/org/apache/cassandra/streaming/StreamSession.java:693: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'boolean Logger.isTraceEnabled()' should be called atomically.
  691.       {
  692.           // prepare tasks
  693. >         state(State.PREPARING);
  694.           ScheduledExecutors.nonPeriodicTasks.execute(() -> prepareAsync(requests, summaries));
  695.       }

#408
src/java/org/apache/cassandra/streaming/StreamSession.java:710: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection NonBlockingHashMap.values()' and 'Iterator Collection.iterator()' should be called atomically.
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710. >             for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);

#409
src/java/org/apache/cassandra/streaming/StreamSession.java:714: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future ThreadPoolExecutor.submit(Runnable)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  712.           messageSender.sendMessage(prepareSynAck);
  713.   
  714. >         streamResult.handleSessionPrepared(this);
  715.   
  716.           if (isPreview())

#410
src/java/org/apache/cassandra/streaming/StreamSession.java:703: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  701.       private void prepareAsync(Collection<StreamRequest> requests, Collection<StreamSummary> summaries)
  702.       {
  703. >         for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705.           for (StreamSummary summary : summaries)

#411
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#412
src/java/org/apache/cassandra/streaming/StreamSession.java:710: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710. >             for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);

#413
src/java/org/apache/cassandra/streaming/StreamSession.java:711: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'StreamSummary StreamTask.getSummary()' should be called atomically.
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710.               for (StreamTransferTask task : transfers.values())
  711. >                 prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);
  713.   

#414
src/java/org/apache/cassandra/streaming/StreamSession.java:706: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'void StreamSession.prepareReceiving(StreamSummary)' should be called atomically.
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705.           for (StreamSummary summary : summaries)
  706. >             prepareReceiving(summary);
  707.   
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();

#415
src/java/org/apache/cassandra/streaming/StreamSession.java:703: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.put(Object,Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  701.       private void prepareAsync(Collection<StreamRequest> requests, Collection<StreamSummary> summaries)
  702.       {
  703. >         for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705.           for (StreamSummary summary : summaries)

#416
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.put(Object,Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#417
src/java/org/apache/cassandra/streaming/StreamSession.java:711: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'boolean Collection.add(Object)' should be called atomically.
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710.               for (StreamTransferTask task : transfers.values())
  711. >                 prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);
  713.   

#418
src/java/org/apache/cassandra/streaming/StreamSession.java:711: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'int StreamTask.getTotalNumberOfFiles()' should be called atomically.
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710.               for (StreamTransferTask task : transfers.values())
  711. >                 prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);
  713.   

#419
src/java/org/apache/cassandra/streaming/StreamSession.java:714: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(StreamMessage)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  712.           messageSender.sendMessage(prepareSynAck);
  713.   
  714. >         streamResult.handleSessionPrepared(this);
  715.   
  716.           if (isPreview())

#420
src/java/org/apache/cassandra/streaming/StreamSession.java:710: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710. >             for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);

#421
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Iterator Collection.iterator()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#422
src/java/org/apache/cassandra/streaming/StreamSession.java:703: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  701.       private void prepareAsync(Collection<StreamRequest> requests, Collection<StreamSummary> summaries)
  702.       {
  703. >         for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705.           for (StreamSummary summary : summaries)

#423
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#424
src/java/org/apache/cassandra/streaming/StreamSession.java:710: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710. >             for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);

#425
src/java/org/apache/cassandra/streaming/StreamSession.java:712: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  710.               for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712. >         messageSender.sendMessage(prepareSynAck);
  713.   
  714.           streamResult.handleSessionPrepared(this);

#426
src/java/org/apache/cassandra/streaming/StreamSession.java:719: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'boolean StreamSession.maybeCompleted()' should be called atomically.
  717.               completePreview();
  718.           else
  719. >             maybeCompleted();
  720.       }
  721.   

#427
src/java/org/apache/cassandra/streaming/StreamSession.java:717: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'void StreamSession.completePreview()' should be called atomically.
  715.   
  716.           if (isPreview())
  717. >             completePreview();
  718.           else
  719.               maybeCompleted();

#428
src/java/org/apache/cassandra/streaming/StreamSession.java:716: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean PreviewKind.isPreview()' should be called atomically.
  714.           streamResult.handleSessionPrepared(this);
  715.   
  716. >         if (isPreview())
  717.               completePreview();
  718.           else

#429
src/java/org/apache/cassandra/streaming/StreamSession.java:719: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean StreamSession.maybeCompleted()' should be called atomically.
  717.               completePreview();
  718.           else
  719. >             maybeCompleted();
  720.       }
  721.   

#430
src/java/org/apache/cassandra/streaming/StreamSession.java:717: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'void StreamSession.completePreview()' should be called atomically.
  715.   
  716.           if (isPreview())
  717. >             completePreview();
  718.           else
  719.               maybeCompleted();

#431
src/java/org/apache/cassandra/streaming/StreamSession.java:719: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.maybeCompleted()' and 'boolean Map.isEmpty()' should be called atomically.
  717.               completePreview();
  718.           else
  719. >             maybeCompleted();
  720.       }
  721.   

#432
src/java/org/apache/cassandra/streaming/StreamSession.java:711: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamTask.getTotalSize()' and 'boolean Collection.add(Object)' should be called atomically.
  709.           if (!peer.equals(FBUtilities.getBroadcastAddressAndPort()))
  710.               for (StreamTransferTask task : transfers.values())
  711. >                 prepareSynAck.summaries.add(task.getSummary());
  712.           messageSender.sendMessage(prepareSynAck);
  713.   

#433
src/java/org/apache/cassandra/streaming/StreamSession.java:714: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  712.           messageSender.sendMessage(prepareSynAck);
  713.   
  714. >         streamResult.handleSessionPrepared(this);
  715.   
  716.           if (isPreview())

#434
src/java/org/apache/cassandra/streaming/StreamSession.java:712: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  710.               for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712. >         messageSender.sendMessage(prepareSynAck);
  713.   
  714.           streamResult.handleSessionPrepared(this);

#435
src/java/org/apache/cassandra/streaming/StreamSession.java:712: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  710.               for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712. >         messageSender.sendMessage(prepareSynAck);
  713.   
  714.           streamResult.handleSessionPrepared(this);

#436
src/java/org/apache/cassandra/streaming/StreamSession.java:712: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  710.               for (StreamTransferTask task : transfers.values())
  711.                   prepareSynAck.summaries.add(task.getSummary());
  712. >         messageSender.sendMessage(prepareSynAck);
  713.   
  714.           streamResult.handleSessionPrepared(this);

#437
src/java/org/apache/cassandra/streaming/StreamSession.java:714: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  712.           messageSender.sendMessage(prepareSynAck);
  713.   
  714. >         streamResult.handleSessionPrepared(this);
  715.   
  716.           if (isPreview())

#438
src/java/org/apache/cassandra/streaming/StreamSession.java:716: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'boolean StreamSession.isPreview()' should be called atomically.
  714.           streamResult.handleSessionPrepared(this);
  715.   
  716. >         if (isPreview())
  717.               completePreview();
  718.           else

#439
src/java/org/apache/cassandra/streaming/StreamSession.java:714: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.handleSessionPrepared(StreamSession)' and 'SessionInfo StreamSession.getSessionInfo()' should be called atomically.
  712.           messageSender.sendMessage(prepareSynAck);
  713.   
  714. >         streamResult.handleSessionPrepared(this);
  715.   
  716.           if (isPreview())

#440
src/java/org/apache/cassandra/streaming/StreamSession.java:716: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.handleSessionPrepared(StreamSession)' and 'boolean StreamSession.isPreview()' should be called atomically.
  714.           streamResult.handleSessionPrepared(this);
  715.   
  716. >         if (isPreview())
  717.               completePreview();
  718.           else

#441
src/java/org/apache/cassandra/streaming/StreamSession.java:717: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.completePreview()' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  715.   
  716.           if (isPreview())
  717. >             completePreview();
  718.           else
  719.               maybeCompleted();

#442
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.failIfFinished()' and 'boolean Iterator.hasNext()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#443
src/java/org/apache/cassandra/streaming/StreamSession.java:705: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.prepareReceiving(StreamSummary)' and 'boolean Iterator.hasNext()' should be called atomically.
  703.           for (StreamRequest request : requests)
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705. >         for (StreamSummary summary : summaries)
  706.               prepareReceiving(summary);
  707.   

#444
src/java/org/apache/cassandra/streaming/StreamSession.java:706: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.prepareReceiving(StreamSummary)' and 'void StreamSession.failIfFinished()' should be called atomically.
  704.               addTransferRanges(request.keyspace, RangesAtEndpoint.concat(request.full, request.transientReplicas), request.columnFamilies, true); // always flush on stream request
  705.           for (StreamSummary summary : summaries)
  706. >             prepareReceiving(summary);
  707.   
  708.           PrepareSynAckMessage prepareSynAck = new PrepareSynAckMessage();

#445
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future ThreadPoolExecutor.submit(Runnable)' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#446
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#447
src/java/org/apache/cassandra/streaming/StreamSession.java:727: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'void StreamSession.prepareReceiving(StreamSummary)' should be called atomically.
  725.           {
  726.               for (StreamSummary summary : msg.summaries)
  727. >                 prepareReceiving(summary);
  728.   
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files

#448
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.put(Object,Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#449
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(StreamMessage)' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#450
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'Iterator Collection.iterator()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#451
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#452
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#453
src/java/org/apache/cassandra/streaming/StreamSession.java:730: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'boolean StreamSession.isPreview()' should be called atomically.
  728.   
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730. >             if (!isPreview())
  731.                   messageSender.sendMessage(new PrepareAckMessage());
  732.           }

#454
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#455
src/java/org/apache/cassandra/streaming/StreamSession.java:731: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730.               if (!isPreview())
  731. >                 messageSender.sendMessage(new PrepareAckMessage());
  732.           }
  733.   

#456
src/java/org/apache/cassandra/streaming/StreamSession.java:735: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'void StreamSession.completePreview()' should be called atomically.
  733.   
  734.           if (isPreview())
  735. >             completePreview();
  736.           else
  737.               startStreamingFiles(true);

#457
src/java/org/apache/cassandra/streaming/StreamSession.java:737: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'void StreamSession.startStreamingFiles(boolean)' should be called atomically.
  735.               completePreview();
  736.           else
  737. >             startStreamingFiles(true);
  738.       }
  739.   

#458
src/java/org/apache/cassandra/streaming/StreamSession.java:730: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean PreviewKind.isPreview()' should be called atomically.
  728.   
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730. >             if (!isPreview())
  731.                   messageSender.sendMessage(new PrepareAckMessage());
  732.           }

#459
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean PreviewKind.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#460
src/java/org/apache/cassandra/streaming/StreamSession.java:731: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730.               if (!isPreview())
  731. >                 messageSender.sendMessage(new PrepareAckMessage());
  732.           }
  733.   

#461
src/java/org/apache/cassandra/streaming/StreamSession.java:735: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'void StreamSession.completePreview()' should be called atomically.
  733.   
  734.           if (isPreview())
  735. >             completePreview();
  736.           else
  737.               startStreamingFiles(true);

#462
src/java/org/apache/cassandra/streaming/StreamSession.java:737: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'void StreamSession.startStreamingFiles(boolean)' should be called atomically.
  735.               completePreview();
  736.           else
  737. >             startStreamingFiles(true);
  738.       }
  739.   

#463
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#464
src/java/org/apache/cassandra/streaming/StreamSession.java:731: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730.               if (!isPreview())
  731. >                 messageSender.sendMessage(new PrepareAckMessage());
  732.           }
  733.   

#465
src/java/org/apache/cassandra/streaming/StreamSession.java:731: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730.               if (!isPreview())
  731. >                 messageSender.sendMessage(new PrepareAckMessage());
  732.           }
  733.   

#466
src/java/org/apache/cassandra/streaming/StreamSession.java:734: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean StreamSession.isPreview()' should be called atomically.
  732.           }
  733.   
  734. >         if (isPreview())
  735.               completePreview();
  736.           else

#467
src/java/org/apache/cassandra/streaming/StreamSession.java:731: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files
  730.               if (!isPreview())
  731. >                 messageSender.sendMessage(new PrepareAckMessage());
  732.           }
  733.   

#468
src/java/org/apache/cassandra/streaming/StreamSession.java:735: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.completePreview()' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  733.   
  734.           if (isPreview())
  735. >             completePreview();
  736.           else
  737.               startStreamingFiles(true);

#469
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.failIfFinished()' and 'boolean Iterator.hasNext()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#470
src/java/org/apache/cassandra/streaming/StreamSession.java:726: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.prepareReceiving(StreamSummary)' and 'boolean Iterator.hasNext()' should be called atomically.
  724.           if (!msg.summaries.isEmpty())
  725.           {
  726. >             for (StreamSummary summary : msg.summaries)
  727.                   prepareReceiving(summary);
  728.   

#471
src/java/org/apache/cassandra/streaming/StreamSession.java:727: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.prepareReceiving(StreamSummary)' and 'void StreamSession.failIfFinished()' should be called atomically.
  725.           {
  726.               for (StreamSummary summary : msg.summaries)
  727. >                 prepareReceiving(summary);
  728.   
  729.               // only send the (final) ACK if we are expecting the peer to send this node (the initiator) some files

#472
src/java/org/apache/cassandra/streaming/StreamSession.java:737: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.startStreamingFiles(boolean)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  735.               completePreview();
  736.           else
  737. >             startStreamingFiles(true);
  738.       }
  739.   

#473
src/java/org/apache/cassandra/streaming/StreamSession.java:737: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.startStreamingFiles(boolean)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  735.               completePreview();
  736.           else
  737. >             startStreamingFiles(true);
  738.       }
  739.   

#474
src/java/org/apache/cassandra/streaming/StreamSession.java:743: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String String.format(String,Object[])' should be called atomically.
  741.       {
  742.           if (isPreview())
  743. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744.           startStreamingFiles(true);
  745.       }

#475
src/java/org/apache/cassandra/streaming/StreamSession.java:743: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'UUID StreamSession.planId()' should be called atomically.
  741.       {
  742.           if (isPreview())
  743. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744.           startStreamingFiles(true);
  745.       }

#476
src/java/org/apache/cassandra/streaming/StreamSession.java:744: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'void StreamSession.startStreamingFiles(boolean)' should be called atomically.
  742.           if (isPreview())
  743.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744. >         startStreamingFiles(true);
  745.       }
  746.   

#477
src/java/org/apache/cassandra/streaming/StreamSession.java:743: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'UUID StreamSession.planId()' should be called atomically.
  741.       {
  742.           if (isPreview())
  743. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744.           startStreamingFiles(true);
  745.       }

#478
src/java/org/apache/cassandra/streaming/StreamSession.java:742: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean PreviewKind.isPreview()' should be called atomically.
  740.       private void prepareAck(PrepareAckMessage msg)
  741.       {
  742. >         if (isPreview())
  743.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744.           startStreamingFiles(true);

#479
src/java/org/apache/cassandra/streaming/StreamSession.java:744: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'void StreamSession.startStreamingFiles(boolean)' should be called atomically.
  742.           if (isPreview())
  743.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744. >         startStreamingFiles(true);
  745.       }
  746.   

#480
src/java/org/apache/cassandra/streaming/StreamSession.java:744: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.startStreamingFiles(boolean)' and 'void StreamResultFuture.handleSessionPrepared(StreamSession)' should be called atomically.
  742.           if (isPreview())
  743.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744. >         startStreamingFiles(true);
  745.       }
  746.   

#481
src/java/org/apache/cassandra/streaming/StreamSession.java:744: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.startStreamingFiles(boolean)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  742.           if (isPreview())
  743.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive PrepareAckMessage for preview session", planId()));
  744. >         startStreamingFiles(true);
  745.       }
  746.   

#482
src/java/org/apache/cassandra/streaming/StreamSession.java:782: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future ThreadPoolExecutor.submit(Runnable)' and 'void StreamHook.reportIncomingStream(TableId,IncomingStream,StreamSession,int)' should be called atomically.
  780.           // send back file received message
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782. >         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);
  784.       }

#483
src/java/org/apache/cassandra/streaming/StreamSession.java:783: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Map.get(Object)' and 'void StreamReceiveTask.received(IncomingStream)' should be called atomically.
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783. >         receivers.get(message.header.tableId).received(message.stream);
  784.       }
  785.   

#484
src/java/org/apache/cassandra/streaming/StreamSession.java:782: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(StreamMessage)' and 'void StreamHook.reportIncomingStream(TableId,IncomingStream,StreamSession,int)' should be called atomically.
  780.           // send back file received message
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782. >         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);
  784.       }

#485
src/java/org/apache/cassandra/streaming/StreamSession.java:774: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String String.format(String,Object[])' should be called atomically.
  772.           if (isPreview())
  773.           {
  774. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive files for preview session", planId()));
  775.           }
  776.   

#486
src/java/org/apache/cassandra/streaming/StreamSession.java:774: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'UUID StreamSession.planId()' should be called atomically.
  772.           if (isPreview())
  773.           {
  774. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive files for preview session", planId()));
  775.           }
  776.   

#487
src/java/org/apache/cassandra/streaming/StreamSession.java:777: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean PreviewKind.isPreview()' and 'long IncomingStream.getSize()' should be called atomically.
  775.           }
  776.   
  777. >         long headerSize = message.stream.getSize();
  778.           StreamingMetrics.totalIncomingBytes.inc(headerSize);
  779.           metrics.incomingBytes.inc(headerSize);

#488
src/java/org/apache/cassandra/streaming/StreamSession.java:774: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'UUID StreamSession.planId()' should be called atomically.
  772.           if (isPreview())
  773.           {
  774. >             throw new RuntimeException(String.format("[Stream #%s] Cannot receive files for preview session", planId()));
  775.           }
  776.   

#489
src/java/org/apache/cassandra/streaming/StreamSession.java:772: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'boolean PreviewKind.isPreview()' should be called atomically.
  770.       public void receive(IncomingStreamMessage message)
  771.       {
  772. >         if (isPreview())
  773.           {
  774.               throw new RuntimeException(String.format("[Stream #%s] Cannot receive files for preview session", planId()));

#490
src/java/org/apache/cassandra/streaming/StreamSession.java:777: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.isPreview()' and 'long IncomingStream.getSize()' should be called atomically.
  775.           }
  776.   
  777. >         long headerSize = message.stream.getSize();
  778.           StreamingMetrics.totalIncomingBytes.inc(headerSize);
  779.           metrics.incomingBytes.inc(headerSize);

#491
src/java/org/apache/cassandra/streaming/StreamSession.java:778: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long IncomingStream.getSize()' and 'void Counter.inc(long)' should be called atomically.
  776.   
  777.           long headerSize = message.stream.getSize();
  778. >         StreamingMetrics.totalIncomingBytes.inc(headerSize);
  779.           metrics.incomingBytes.inc(headerSize);
  780.           // send back file received message

#492
src/java/org/apache/cassandra/streaming/StreamSession.java:781: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Counter.inc(long)' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  779.           metrics.incomingBytes.inc(headerSize);
  780.           // send back file received message
  781. >         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);

#493
src/java/org/apache/cassandra/streaming/StreamSession.java:782: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' and 'void StreamHook.reportIncomingStream(TableId,IncomingStream,StreamSession,int)' should be called atomically.
  780.           // send back file received message
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782. >         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);
  784.       }

#494
src/java/org/apache/cassandra/streaming/StreamSession.java:781: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  779.           metrics.incomingBytes.inc(headerSize);
  780.           // send back file received message
  781. >         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);

#495
src/java/org/apache/cassandra/streaming/StreamSession.java:781: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  779.           metrics.incomingBytes.inc(headerSize);
  780.           // send back file received message
  781. >         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);

#496
src/java/org/apache/cassandra/streaming/StreamSession.java:781: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  779.           metrics.incomingBytes.inc(headerSize);
  780.           // send back file received message
  781. >         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);

#497
src/java/org/apache/cassandra/streaming/StreamSession.java:782: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void StreamHook.reportIncomingStream(TableId,IncomingStream,StreamSession,int)' should be called atomically.
  780.           // send back file received message
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782. >         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783.           receivers.get(message.header.tableId).received(message.stream);
  784.       }

#498
src/java/org/apache/cassandra/streaming/StreamSession.java:783: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamHook.reportIncomingStream(TableId,IncomingStream,StreamSession,int)' and 'Object Map.get(Object)' should be called atomically.
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783. >         receivers.get(message.header.tableId).received(message.stream);
  784.       }
  785.   

#499
src/java/org/apache/cassandra/streaming/StreamSession.java:783: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamReceiveTask.received(IncomingStream)' and 'boolean StreamSession.isPreview()' should be called atomically.
  781.           messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
  782.           StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
  783. >         receivers.get(message.header.tableId).received(message.stream);
  784.       }
  785.   

#500
src/java/org/apache/cassandra/streaming/StreamSession.java:794: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object NonBlockingHashMap.get(Object)' and 'void StreamTransferTask.complete(int)' should be called atomically.
  792.       public void received(TableId tableId, int sequenceNumber)
  793.       {
  794. >         transfers.get(tableId).complete(sequenceNumber);
  795.       }
  796.   

#501
src/java/org/apache/cassandra/streaming/StreamSession.java:794: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamTransferTask.complete(int)' and 'Integer Integer.valueOf(int)' should be called atomically.
  792.       public void received(TableId tableId, int sequenceNumber)
  793.       {
  794. >         transfers.get(tableId).complete(sequenceNumber);
  795.       }
  796.   

#502
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:806: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFuture ColumnFamilyStore.waitForFlushes()' and 'View Tracker.getView()' should be called atomically.
  804.                   return switchMemtable();
  805.           }
  806. >         return waitForFlushes();
  807.       }
  808.   

#503
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:806: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'ListenableFuture ColumnFamilyStore.waitForFlushes()' should be called atomically.
  804.                   return switchMemtable();
  805.           }
  806. >         return waitForFlushes();
  807.       }
  808.   

#504
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:806: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object List.get(int)' and 'ListenableFuture ColumnFamilyStore.waitForFlushes()' should be called atomically.
  804.                   return switchMemtable();
  805.           }
  806. >         return waitForFlushes();
  807.       }
  808.   

#505
src/java/org/apache/cassandra/index/SecondaryIndexManager.java:817: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Map.values()' and 'Consumer SecondaryIndexManager.callsite_org.apache.cassandra.index.SecondaryIndexManager$Lambda$_17_18(Set)' should be called atomically.
  815.       {
  816.           Set<ColumnFamilyStore> backingTables = new HashSet<>();
  817. >         indexes.values().forEach(index -> index.getBackingTable().ifPresent(backingTables::add));
  818.           return backingTables;
  819.       }

#506
src/java/org/apache/cassandra/index/SecondaryIndexManager.java:817: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Consumer SecondaryIndexManager.callsite_org.apache.cassandra.index.SecondaryIndexManager$Lambda$_17_18(Set)' and 'void Collection.forEach(Consumer)' should be called atomically.
  815.       {
  816.           Set<ColumnFamilyStore> backingTables = new HashSet<>();
  817. >         indexes.values().forEach(index -> index.getBackingTable().ifPresent(backingTables::add));
  818.           return backingTables;
  819.       }

#507
src/java/org/apache/cassandra/utils/FBUtilities.java:825: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long,boolean)' and 'Double Double.valueOf(double)' should be called atomically.
  823.       public static String prettyPrintMemory(long size)
  824.       {
  825. >         return prettyPrintMemory(size, false);
  826.       }
  827.   

#508
src/java/org/apache/cassandra/utils/FBUtilities.java:831: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Double Double.valueOf(double)' and 'String String.format(String,Object[])' should be called atomically.
  829.       {
  830.           if (size >= 1 << 30)
  831. >             return String.format("%.3f%sGiB", size / (double) (1 << 30), includeSpace ? " " : "");
  832.           if (size >= 1 << 20)
  833.               return String.format("%.3f%sMiB", size / (double) (1 << 20), includeSpace ? " " : "");

#509
src/java/org/apache/cassandra/utils/FBUtilities.java:833: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Double Double.valueOf(double)' and 'String String.format(String,Object[])' should be called atomically.
  831.               return String.format("%.3f%sGiB", size / (double) (1 << 30), includeSpace ? " " : "");
  832.           if (size >= 1 << 20)
  833. >             return String.format("%.3f%sMiB", size / (double) (1 << 20), includeSpace ? " " : "");
  834.           return String.format("%.3f%sKiB", size / (double) (1 << 10), includeSpace ? " " : "");
  835.       }

#510
src/java/org/apache/cassandra/utils/FBUtilities.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Double Double.valueOf(double)' and 'String String.format(String,Object[])' should be called atomically.
  832.           if (size >= 1 << 20)
  833.               return String.format("%.3f%sMiB", size / (double) (1 << 20), includeSpace ? " " : "");
  834. >         return String.format("%.3f%sKiB", size / (double) (1 << 10), includeSpace ? " " : "");
  835.       }
  836.   

#511
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:854: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Float Float.valueOf(float)' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  852.                                      FBUtilities.prettyPrintMemory(onHeapTotal),
  853.                                      onHeapRatio * 100,
  854. >                                    FBUtilities.prettyPrintMemory(offHeapTotal),
  855.                                      offHeapRatio * 100));
  856.       }

#512
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:851: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Float Float.valueOf(float)' and 'String String.format(String,Object[])' should be called atomically.
  849.           logger.info("Enqueuing flush of {}: {}",
  850.                        name,
  851. >                      String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",
  852.                                      FBUtilities.prettyPrintMemory(onHeapTotal),
  853.                                      onHeapRatio * 100,

#513
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Set.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#514
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:835: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835. >         onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();

#515
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#516
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'int List.size()' should be called atomically.
  832.           float onHeapRatio = 0, offHeapRatio = 0;
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834. >         Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();

#517
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'int List.size()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#518
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:836: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator Memtable.getAllocator()' and 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' should be called atomically.
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836. >         offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();

#519
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:838: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator Memtable.getAllocator()' and 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' should be called atomically.
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838. >         offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())

#520
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:835: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator Memtable.getAllocator()' and 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' should be called atomically.
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835. >         onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();

#521
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:837: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator Memtable.getAllocator()' and 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' should be called atomically.
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837. >         onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   

#522
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:843: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator Memtable.getAllocator()' and 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' should be called atomically.
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843. >             onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();

#523
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:836: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' and 'float MemtableAllocator$SubAllocator.ownershipRatio()' should be called atomically.
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836. >         offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();

#524
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:844: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' and 'float MemtableAllocator$SubAllocator.ownershipRatio()' should be called atomically.
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844. >             offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();

#525
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:838: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' and 'long MemtableAllocator$SubAllocator.owns()' should be called atomically.
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838. >         offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())

#526
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:846: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' and 'long MemtableAllocator$SubAllocator.owns()' should be called atomically.
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846. >             offHeapTotal += allocator.offHeap().owns();
  847.           }
  848.   

#527
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:835: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' and 'float MemtableAllocator$SubAllocator.ownershipRatio()' should be called atomically.
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835. >         onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();

#528
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:843: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' and 'float MemtableAllocator$SubAllocator.ownershipRatio()' should be called atomically.
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843. >             onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();

#529
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:837: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' and 'long MemtableAllocator$SubAllocator.owns()' should be called atomically.
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837. >         onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   

#530
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:845: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' and 'long MemtableAllocator$SubAllocator.owns()' should be called atomically.
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845. >             onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();
  847.           }

#531
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object AtomicReference.get()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  832.           float onHeapRatio = 0, offHeapRatio = 0;
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834. >         Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();

#532
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object AtomicReference.get()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#533
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Tracker ColumnFamilyStore.getTracker()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#534
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:835: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object List.get(int)' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835. >         onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();

#535
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object List.get(int)' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#536
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' and 'Collection Map.values()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#537
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' and 'Iterator Set.iterator()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#538
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:853: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'Float Float.valueOf(float)' should be called atomically.
  851.                        String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",
  852.                                      FBUtilities.prettyPrintMemory(onHeapTotal),
  853. >                                    onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),
  855.                                      offHeapRatio * 100));

#539
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:855: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'Float Float.valueOf(float)' should be called atomically.
  853.                                      onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),
  855. >                                    offHeapRatio * 100));
  856.       }
  857.   

#540
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:852: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'String FBUtilities.prettyPrintMemory(long,boolean)' should be called atomically.
  850.                        name,
  851.                        String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",
  852. >                                    FBUtilities.prettyPrintMemory(onHeapTotal),
  853.                                      onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),

#541
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:854: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long)' and 'String FBUtilities.prettyPrintMemory(long,boolean)' should be called atomically.
  852.                                      FBUtilities.prettyPrintMemory(onHeapTotal),
  853.                                      onHeapRatio * 100,
  854. >                                    FBUtilities.prettyPrintMemory(offHeapTotal),
  855.                                      offHeapRatio * 100));
  856.       }

#542
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:853: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long,boolean)' and 'Float Float.valueOf(float)' should be called atomically.
  851.                        String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",
  852.                                      FBUtilities.prettyPrintMemory(onHeapTotal),
  853. >                                    onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),
  855.                                      offHeapRatio * 100));

#543
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:855: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String FBUtilities.prettyPrintMemory(long,boolean)' and 'Float Float.valueOf(float)' should be called atomically.
  853.                                      onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),
  855. >                                    offHeapRatio * 100));
  856.       }
  857.   

#544
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:849: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String String.format(String,Object[])' and 'void Logger.info(String,Object,Object)' should be called atomically.
  847.           }
  848.   
  849. >         logger.info("Enqueuing flush of {}: {}",
  850.                        name,
  851.                        String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",

#545
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Tracker ColumnFamilyStore.getTracker()' and 'View Tracker.getView()' should be called atomically.
  832.           float onHeapRatio = 0, offHeapRatio = 0;
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834. >         Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();

#546
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Tracker ColumnFamilyStore.getTracker()' and 'View Tracker.getView()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#547
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  832.           float onHeapRatio = 0, offHeapRatio = 0;
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834. >         Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();

#548
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#549
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:834: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Object AtomicReference.get()' should be called atomically.
  832.           float onHeapRatio = 0, offHeapRatio = 0;
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834. >         Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();

#550
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:842: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Object AtomicReference.get()' should be called atomically.
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842. >             MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();

#551
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:836: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Float.isNaN(float)' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836. >         offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();

#552
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:837: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Float.isNaN(float)' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837. >         onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   

#553
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:844: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Float.isNaN(float)' and 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' should be called atomically.
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844. >             offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();

#554
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:845: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Float.isNaN(float)' and 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' should be called atomically.
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845. >             onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();
  847.           }

#555
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#556
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:852: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'String FBUtilities.prettyPrintMemory(long)' should be called atomically.
  850.                        name,
  851.                        String.format("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap",
  852. >                                    FBUtilities.prettyPrintMemory(onHeapTotal),
  853.                                      onHeapRatio * 100,
  854.                                      FBUtilities.prettyPrintMemory(offHeapTotal),

#557
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:836: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836. >         offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();

#558
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:837: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837. >         onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   

#559
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:844: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' should be called atomically.
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844. >             offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();

#560
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:845: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'MemtableAllocator$SubAllocator MemtableAllocator.onHeap()' should be called atomically.
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845. >             onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();
  847.           }

#561
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:835: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'boolean Float.isNaN(float)' should be called atomically.
  833.           long onHeapTotal = 0, offHeapTotal = 0;
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835. >         onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();

#562
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:836: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'boolean Float.isNaN(float)' should be called atomically.
  834.           Memtable memtable = getTracker().getView().getCurrentMemtable();
  835.           onHeapRatio +=  memtable.getAllocator().onHeap().ownershipRatio();
  836. >         offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();

#563
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:843: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'boolean Float.isNaN(float)' should be called atomically.
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843. >             onHeapRatio += allocator.onHeap().ownershipRatio();
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();

#564
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:844: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'float MemtableAllocator$SubAllocator.ownershipRatio()' and 'boolean Float.isNaN(float)' should be called atomically.
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();
  843.               onHeapRatio += allocator.onHeap().ownershipRatio();
  844. >             offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846.               offHeapTotal += allocator.offHeap().owns();

#565
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:838: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long MemtableAllocator$SubAllocator.owns()' and 'MemtableAllocator Memtable.getAllocator()' should be called atomically.
  836.           offHeapRatio += memtable.getAllocator().offHeap().ownershipRatio();
  837.           onHeapTotal += memtable.getAllocator().onHeap().owns();
  838. >         offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840.           for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())

#566
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:846: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long MemtableAllocator$SubAllocator.owns()' and 'MemtableAllocator$SubAllocator MemtableAllocator.offHeap()' should be called atomically.
  844.               offHeapRatio += allocator.offHeap().ownershipRatio();
  845.               onHeapTotal += allocator.onHeap().owns();
  846. >             offHeapTotal += allocator.offHeap().owns();
  847.           }
  848.   

#567
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long MemtableAllocator$SubAllocator.owns()' and 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#568
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long MemtableAllocator$SubAllocator.owns()' and 'boolean Iterator.hasNext()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#569
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:840: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Collection.forEach(Consumer)' and 'Iterator Set.iterator()' should be called atomically.
  838.           offHeapTotal += memtable.getAllocator().offHeap().owns();
  839.   
  840. >         for (ColumnFamilyStore indexCfs : indexManager.getAllIndexColumnFamilyStores())
  841.           {
  842.               MemtableAllocator allocator = indexCfs.getTracker().getView().getCurrentMemtable().getAllocator();

#570
src/java/org/apache/cassandra/streaming/StreamSession.java:862: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ArrayList Lists.newArrayList()' and 'Collection Map.values()' should be called atomically.
  860.       {
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862. >         for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();

#571
src/java/org/apache/cassandra/streaming/StreamSession.java:865: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ArrayList Lists.newArrayList()' and 'Collection NonBlockingHashMap.values()' should be called atomically.
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865. >         for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it

#572
src/java/org/apache/cassandra/streaming/StreamSession.java:862: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Map.values()' and 'Iterator Collection.iterator()' should be called atomically.
  860.       {
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862. >         for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();

#573
src/java/org/apache/cassandra/streaming/StreamSession.java:865: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection NonBlockingHashMap.values()' and 'Iterator Collection.iterator()' should be called atomically.
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865. >         for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it

#574
src/java/org/apache/cassandra/streaming/StreamSession.java:862: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  860.       {
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862. >         for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();

#575
src/java/org/apache/cassandra/streaming/StreamSession.java:865: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865. >         for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it

#576
src/java/org/apache/cassandra/streaming/StreamSession.java:863: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'StreamSummary StreamTask.getSummary()' should be called atomically.
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862.           for (StreamTask receiver : receivers.values())
  863. >             receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())

#577
src/java/org/apache/cassandra/streaming/StreamSession.java:866: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'StreamSummary StreamTask.getSummary()' should be called atomically.
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())
  866. >             transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it
  868.           return new SessionInfo(peer, index, template.connectTo == null ? peer : template.connectTo, receivingSummaries, transferSummaries, state);

#578
src/java/org/apache/cassandra/streaming/StreamSession.java:863: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'boolean ArrayList.add(Object)' should be called atomically.
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862.           for (StreamTask receiver : receivers.values())
  863. >             receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())

#579
src/java/org/apache/cassandra/streaming/StreamSession.java:866: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'boolean ArrayList.add(Object)' should be called atomically.
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())
  866. >             transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it
  868.           return new SessionInfo(peer, index, template.connectTo == null ? peer : template.connectTo, receivingSummaries, transferSummaries, state);

#580
src/java/org/apache/cassandra/streaming/StreamSession.java:863: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'int StreamTask.getTotalNumberOfFiles()' should be called atomically.
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862.           for (StreamTask receiver : receivers.values())
  863. >             receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())

#581
src/java/org/apache/cassandra/streaming/StreamSession.java:866: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'StreamSummary StreamTask.getSummary()' and 'int StreamTask.getTotalNumberOfFiles()' should be called atomically.
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())
  866. >             transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it
  868.           return new SessionInfo(peer, index, template.connectTo == null ? peer : template.connectTo, receivingSummaries, transferSummaries, state);

#582
src/java/org/apache/cassandra/streaming/StreamSession.java:862: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  860.       {
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862. >         for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();

#583
src/java/org/apache/cassandra/streaming/StreamSession.java:865: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865. >         for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it

#584
src/java/org/apache/cassandra/streaming/StreamSession.java:864: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'ArrayList Lists.newArrayList()' should be called atomically.
  862.           for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864. >         List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());

#585
src/java/org/apache/cassandra/streaming/StreamSession.java:862: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  860.       {
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862. >         for (StreamTask receiver : receivers.values())
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();

#586
src/java/org/apache/cassandra/streaming/StreamSession.java:865: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  863.               receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865. >         for (StreamTask transfer : transfers.values())
  866.               transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it

#587
src/java/org/apache/cassandra/streaming/StreamSession.java:863: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamTask.getTotalSize()' and 'boolean ArrayList.add(Object)' should be called atomically.
  861.           List<StreamSummary> receivingSummaries = Lists.newArrayList();
  862.           for (StreamTask receiver : receivers.values())
  863. >             receivingSummaries.add(receiver.getSummary());
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())

#588
src/java/org/apache/cassandra/streaming/StreamSession.java:866: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'long StreamTask.getTotalSize()' and 'boolean ArrayList.add(Object)' should be called atomically.
  864.           List<StreamSummary> transferSummaries = Lists.newArrayList();
  865.           for (StreamTask transfer : transfers.values())
  866. >             transferSummaries.add(transfer.getSummary());
  867.           // TODO: the connectTo treatment here is peculiar, and needs thinking about - since the connection factory can change it
  868.           return new SessionInfo(peer, index, template.connectTo == null ? peer : template.connectTo, receivingSummaries, transferSummaries, state);

#589
src/java/org/apache/cassandra/streaming/StreamSession.java:892: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future StreamSession.closeSession(StreamSession$State)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  890.       {
  891.           logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892. >         closeSession(State.FAILED);
  893.       }
  894.   

#590
src/java/org/apache/cassandra/streaming/StreamSession.java:891: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String InetAddressAndPort.toString(boolean)' should be called atomically.
  889.       public void onRemove(InetAddressAndPort endpoint)
  890.       {
  891. >         logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892.           closeSession(State.FAILED);
  893.       }

#591
src/java/org/apache/cassandra/streaming/StreamSession.java:891: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'void Logger.error(String,Object,Object)' should be called atomically.
  889.       public void onRemove(InetAddressAndPort endpoint)
  890.       {
  891. >         logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892.           closeSession(State.FAILED);
  893.       }

#592
src/java/org/apache/cassandra/streaming/StreamSession.java:891: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString(boolean)' and 'void Logger.error(String,Object,Object)' should be called atomically.
  889.       public void onRemove(InetAddressAndPort endpoint)
  890.       {
  891. >         logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892.           closeSession(State.FAILED);
  893.       }

#593
src/java/org/apache/cassandra/streaming/StreamSession.java:891: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String InetAddressAndPort.toString()' should be called atomically.
  889.       public void onRemove(InetAddressAndPort endpoint)
  890.       {
  891. >         logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892.           closeSession(State.FAILED);
  893.       }

#594
src/java/org/apache/cassandra/streaming/StreamSession.java:892: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.error(String,Object,Object)' and 'Future StreamSession.closeSession(StreamSession$State)' should be called atomically.
  890.       {
  891.           logger.error("[Stream #{}] Session failed because remote peer {} has left.", planId(), peer.toString());
  892. >         closeSession(State.FAILED);
  893.       }
  894.   

#595
src/java/org/apache/cassandra/streaming/StreamSession.java:898: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future StreamSession.closeSession(StreamSession$State)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  896.       {
  897.           logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898. >         closeSession(State.FAILED);
  899.       }
  900.   

#596
src/java/org/apache/cassandra/streaming/StreamSession.java:897: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'String InetAddressAndPort.toString(boolean)' should be called atomically.
  895.       public void onRestart(InetAddressAndPort endpoint, EndpointState epState)
  896.       {
  897. >         logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898.           closeSession(State.FAILED);
  899.       }

#597
src/java/org/apache/cassandra/streaming/StreamSession.java:897: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString()' and 'void Logger.error(String,Object,Object)' should be called atomically.
  895.       public void onRestart(InetAddressAndPort endpoint, EndpointState epState)
  896.       {
  897. >         logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898.           closeSession(State.FAILED);
  899.       }

#598
src/java/org/apache/cassandra/streaming/StreamSession.java:897: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String InetAddressAndPort.toString(boolean)' and 'void Logger.error(String,Object,Object)' should be called atomically.
  895.       public void onRestart(InetAddressAndPort endpoint, EndpointState epState)
  896.       {
  897. >         logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898.           closeSession(State.FAILED);
  899.       }

#599
src/java/org/apache/cassandra/streaming/StreamSession.java:897: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'UUID StreamSession.planId()' and 'String InetAddressAndPort.toString()' should be called atomically.
  895.       public void onRestart(InetAddressAndPort endpoint, EndpointState epState)
  896.       {
  897. >         logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898.           closeSession(State.FAILED);
  899.       }

#600
src/java/org/apache/cassandra/streaming/StreamSession.java:898: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Logger.error(String,Object,Object)' and 'Future StreamSession.closeSession(StreamSession$State)' should be called atomically.
  896.       {
  897.           logger.error("[Stream #{}] Session failed because remote peer {} was restarted.", planId(), peer.toString());
  898. >         closeSession(State.FAILED);
  899.       }
  900.   

#601
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:903: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Callable ColumnFamilyStore.callsite_org.apache.cassandra.db.ColumnFamilyStore$Lambda$_167_13(ColumnFamilyStore,Memtable)' and 'ListenableFutureTask ListenableFutureTask.create(Callable)' should be called atomically.
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902.           final Memtable current = data.getView().getCurrentMemtable();
  903. >         ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);
  905.               return current.getCommitLogLowerBound();

#602
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:907: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFutureTask ListenableFutureTask.create(Callable)' and 'void ExecutorService.execute(Runnable)' should be called atomically.
  905.               return current.getCommitLogLowerBound();
  906.           });
  907. >         postFlushExecutor.execute(task);
  908.           return task;
  909.       }

#603
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:903: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'Callable ColumnFamilyStore.callsite_org.apache.cassandra.db.ColumnFamilyStore$Lambda$_167_13(ColumnFamilyStore,Memtable)' should be called atomically.
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902.           final Memtable current = data.getView().getCurrentMemtable();
  903. >         ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);
  905.               return current.getCommitLogLowerBound();

#604
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:902: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Memtable View.getCurrentMemtable()' and 'int List.size()' should be called atomically.
  900.           // we grab the current memtable; once any preceding memtables have flushed, we know its
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902. >         final Memtable current = data.getView().getCurrentMemtable();
  903.           ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);

#605
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:902: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object AtomicReference.get()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  900.           // we grab the current memtable; once any preceding memtables have flushed, we know its
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902. >         final Memtable current = data.getView().getCurrentMemtable();
  903.           ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);

#606
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:903: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object List.get(int)' and 'Callable ColumnFamilyStore.callsite_org.apache.cassandra.db.ColumnFamilyStore$Lambda$_167_13(ColumnFamilyStore,Memtable)' should be called atomically.
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902.           final Memtable current = data.getView().getCurrentMemtable();
  903. >         ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);
  905.               return current.getCommitLogLowerBound();

#607
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:902: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Memtable View.getCurrentMemtable()' should be called atomically.
  900.           // we grab the current memtable; once any preceding memtables have flushed, we know its
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902. >         final Memtable current = data.getView().getCurrentMemtable();
  903.           ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);

#608
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:902: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'View Tracker.getView()' and 'Object AtomicReference.get()' should be called atomically.
  900.           // we grab the current memtable; once any preceding memtables have flushed, we know its
  901.           // commitLogLowerBound has been set (as this it is set with the upper bound of the preceding memtable)
  902. >         final Memtable current = data.getView().getCurrentMemtable();
  903.           ListenableFutureTask<CommitLogPosition> task = ListenableFutureTask.create(() -> {
  904.               logger.debug("forceFlush requested but everything is clean in {}", name);

#609
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Map.values()' and 'Collection NonBlockingHashMap.values()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#610
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection NonBlockingHashMap.values()' and 'Iterable Iterables.concat(Iterable,Iterable)' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#611
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future FBUtilities.allOf(Collection)' and 'Collection Map.values()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#612
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future StreamSession.closeSession(StreamSession$State)' and 'Collection Map.values()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#613
src/java/org/apache/cassandra/streaming/StreamSession.java:906: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future StreamSession.closeSession(StreamSession$State)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  904.           {
  905.               state(State.WAIT_COMPLETE);
  906. >             closeSession(State.COMPLETE);
  907.           }
  908.           finally

#614
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterable Iterables.concat(Iterable,Iterable)' and 'Iterator Iterable.iterator()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#615
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Iterable.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#616
src/java/org/apache/cassandra/streaming/StreamSession.java:913: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'void StreamTask.abort()' should be called atomically.
  911.               // expected streaming, but don't leak any resources held by the task
  912.               for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913. >                 task.abort();
  914.           }
  915.       }

#617
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#618
src/java/org/apache/cassandra/streaming/StreamSession.java:906: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession$MessageStateSink.recordState(InetAddressAndPort,StreamSession$State)' and 'Future StreamSession.closeSession(StreamSession$State)' should be called atomically.
  904.           {
  905.               state(State.WAIT_COMPLETE);
  906. >             closeSession(State.COMPLETE);
  907.           }
  908.           finally

#619
src/java/org/apache/cassandra/streaming/StreamSession.java:906: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'Future StreamSession.closeSession(StreamSession$State)' should be called atomically.
  904.           {
  905.               state(State.WAIT_COMPLETE);
  906. >             closeSession(State.COMPLETE);
  907.           }
  908.           finally

#620
src/java/org/apache/cassandra/streaming/StreamSession.java:905: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'boolean Logger.isTraceEnabled()' should be called atomically.
  903.           try
  904.           {
  905. >             state(State.WAIT_COMPLETE);
  906.               closeSession(State.COMPLETE);
  907.           }

#621
src/java/org/apache/cassandra/streaming/StreamSession.java:912: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamTask.abort()' and 'boolean Iterator.hasNext()' should be called atomically.
  910.               // aborting the tasks here needs to be the last thing we do so that we accurately report
  911.               // expected streaming, but don't leak any resources held by the task
  912. >             for (StreamTask task : Iterables.concat(receivers.values(), transfers.values()))
  913.                   task.abort();
  914.           }

#622
src/java/org/apache/cassandra/streaming/StreamSession.java:924: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Iterable.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  922.       {
  923.           List<Future<?>> flushes = new ArrayList<>();
  924. >         for (ColumnFamilyStore cfs : stores)
  925.               flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);

#623
src/java/org/apache/cassandra/streaming/StreamSession.java:926: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'List FBUtilities.waitOnFutures(Iterable)' and 'List FBUtilities.waitOnFutures(Iterable,long,TimeUnit)' should be called atomically.
  924.           for (ColumnFamilyStore cfs : stores)
  925.               flushes.add(cfs.forceFlush());
  926. >         FBUtilities.waitOnFutures(flushes);
  927.       }
  928.   

#624
src/java/org/apache/cassandra/streaming/StreamSession.java:925: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFuture ColumnFamilyStore.forceFlush()' and 'View Tracker.getView()' should be called atomically.
  923.           List<Future<?>> flushes = new ArrayList<>();
  924.           for (ColumnFamilyStore cfs : stores)
  925. >             flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);
  927.       }

#625
src/java/org/apache/cassandra/streaming/StreamSession.java:925: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFuture ColumnFamilyStore.forceFlush()' and 'boolean ArrayList.add(Object)' should be called atomically.
  923.           List<Future<?>> flushes = new ArrayList<>();
  924.           for (ColumnFamilyStore cfs : stores)
  925. >             flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);
  927.       }

#626
src/java/org/apache/cassandra/streaming/StreamSession.java:925: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFuture ColumnFamilyStore.switchMemtableIfCurrent(Memtable)' and 'boolean ArrayList.add(Object)' should be called atomically.
  923.           List<Future<?>> flushes = new ArrayList<>();
  924.           for (ColumnFamilyStore cfs : stores)
  925. >             flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);
  927.       }

#627
src/java/org/apache/cassandra/streaming/StreamSession.java:925: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'ListenableFuture ColumnFamilyStore.waitForFlushes()' and 'boolean ArrayList.add(Object)' should be called atomically.
  923.           List<Future<?>> flushes = new ArrayList<>();
  924.           for (ColumnFamilyStore cfs : stores)
  925. >             flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);
  927.       }

#628
src/java/org/apache/cassandra/streaming/StreamSession.java:925: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'ListenableFuture ColumnFamilyStore.forceFlush()' should be called atomically.
  923.           List<Future<?>> flushes = new ArrayList<>();
  924.           for (ColumnFamilyStore cfs : stores)
  925. >             flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);
  927.       }

#629
src/java/org/apache/cassandra/streaming/StreamSession.java:924: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean ArrayList.add(Object)' and 'boolean Iterator.hasNext()' should be called atomically.
  922.       {
  923.           List<Future<?>> flushes = new ArrayList<>();
  924. >         for (ColumnFamilyStore cfs : stores)
  925.               flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);

#630
src/java/org/apache/cassandra/streaming/StreamSession.java:926: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'List FBUtilities.waitOnFutures(Iterable)' should be called atomically.
  924.           for (ColumnFamilyStore cfs : stores)
  925.               flushes.add(cfs.forceFlush());
  926. >         FBUtilities.waitOnFutures(flushes);
  927.       }
  928.   

#631
src/java/org/apache/cassandra/streaming/StreamSession.java:924: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  922.       {
  923.           List<Future<?>> flushes = new ArrayList<>();
  924. >         for (ColumnFamilyStore cfs : stores)
  925.               flushes.add(cfs.forceFlush());
  926.           FBUtilities.waitOnFutures(flushes);

#632
src/java/org/apache/cassandra/streaming/StreamSession.java:947: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection Map.values()' and 'boolean Collection.isEmpty()' should be called atomically.
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();
  947. >             if (!messages.isEmpty())
  948.               {
  949.                   for (OutgoingStreamMessage ofm : messages)

#633
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection NonBlockingHashMap.values()' and 'Iterator Collection.iterator()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#634
src/java/org/apache/cassandra/streaming/StreamSession.java:946: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection StreamTransferTask.getFileMessages()' and 'Collection Map.values()' should be called atomically.
  944.           for (StreamTransferTask task : transfers.values())
  945.           {
  946. >             Collection<OutgoingStreamMessage> messages = task.getFileMessages();
  947.               if (!messages.isEmpty())
  948.               {

#635
src/java/org/apache/cassandra/streaming/StreamSession.java:947: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Collection StreamTransferTask.getFileMessages()' and 'boolean Collection.isEmpty()' should be called atomically.
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();
  947. >             if (!messages.isEmpty())
  948.               {
  949.                   for (OutgoingStreamMessage ofm : messages)

#636
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Future ThreadPoolExecutor.submit(Runnable)' and 'boolean Iterator.hasNext()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#637
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#638
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Iterator Collection.iterator()' and 'boolean Iterator.hasNext()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#639
src/java/org/apache/cassandra/streaming/StreamSession.java:946: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'Collection StreamTransferTask.getFileMessages()' should be called atomically.
  944.           for (StreamTransferTask task : transfers.values())
  945.           {
  946. >             Collection<OutgoingStreamMessage> messages = task.getFileMessages();
  947.               if (!messages.isEmpty())
  948.               {

#640
src/java/org/apache/cassandra/streaming/StreamSession.java:952: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Object Iterator.next()' and 'void StreamMessageHeader.addSessionInfo(StreamSession)' should be called atomically.
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952. >                     ofm.header.addSessionInfo(this);
  953.                       messageSender.sendMessage(ofm);
  954.                   }

#641
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'String Object.makeConcatWithConstants(StreamMessage)' and 'boolean Iterator.hasNext()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#642
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'Iterator Collection.iterator()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#643
src/java/org/apache/cassandra/streaming/StreamSession.java:958: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Collection.isEmpty()' and 'void StreamSession.taskCompleted(StreamTransferTask)' should be called atomically.
  956.               else
  957.               {
  958. >                 taskCompleted(task); // there are no files to send
  959.               }
  960.           }

#644
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#645
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'Object Iterator.next()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#646
src/java/org/apache/cassandra/streaming/StreamSession.java:961: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean Iterator.hasNext()' and 'boolean StreamSession.maybeCompleted()' should be called atomically.
  959.               }
  960.           }
  961. >         maybeCompleted();
  962.       }
  963.   

#647
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.maybeCompleted()' and 'boolean Iterator.hasNext()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#648
src/java/org/apache/cassandra/streaming/StreamSession.java:961: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'boolean StreamSession.maybeCompleted()' and 'boolean Map.isEmpty()' should be called atomically.
  959.               }
  960.           }
  961. >         maybeCompleted();
  962.       }
  963.   

#649
src/java/org/apache/cassandra/streaming/StreamSession.java:953: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'int StreamSession.sessionIndex()' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952.                       ofm.header.addSessionInfo(this);
  953. >                     messageSender.sendMessage(ofm);
  954.                   }
  955.               }

#650
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendControlMessage(Channel,StreamMessage,GenericFutureListener)' and 'boolean Iterator.hasNext()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#651
src/java/org/apache/cassandra/streaming/StreamSession.java:953: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'String Object.makeConcatWithConstants(StreamMessage)' should be called atomically.
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952.                       ofm.header.addSessionInfo(this);
  953. >                     messageSender.sendMessage(ofm);
  954.                   }
  955.               }

#652
src/java/org/apache/cassandra/streaming/StreamSession.java:949: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Iterator.hasNext()' should be called atomically.
  947.               if (!messages.isEmpty())
  948.               {
  949. >                 for (OutgoingStreamMessage ofm : messages)
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)

#653
src/java/org/apache/cassandra/streaming/StreamSession.java:953: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'boolean Logger.isDebugEnabled()' should be called atomically.
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952.                       ofm.header.addSessionInfo(this);
  953. >                     messageSender.sendMessage(ofm);
  954.                   }
  955.               }

#654
src/java/org/apache/cassandra/streaming/StreamSession.java:953: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' and 'void NettyStreamingMessageSender.setupControlMessageChannel()' should be called atomically.
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952.                       ofm.header.addSessionInfo(this);
  953. >                     messageSender.sendMessage(ofm);
  954.                   }
  955.               }

#655
src/java/org/apache/cassandra/streaming/StreamSession.java:952: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessageHeader.addSessionInfo(StreamSession)' and 'UUID StreamSession.planId()' should be called atomically.
  950.                   {
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952. >                     ofm.header.addSessionInfo(this);
  953.                       messageSender.sendMessage(ofm);
  954.                   }

#656
src/java/org/apache/cassandra/streaming/StreamSession.java:953: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamMessageHeader.addSessionInfo(StreamSession)' and 'void NettyStreamingMessageSender.sendMessage(StreamMessage)' should be called atomically.
  951.                       // pass the session planId/index to the OFM (which is only set at init(), after the transfers have already been created)
  952.                       ofm.header.addSessionInfo(this);
  953. >                     messageSender.sendMessage(ofm);
  954.                   }
  955.               }

#657
src/java/org/apache/cassandra/streaming/StreamSession.java:942: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.fireStreamEvent(StreamEvent)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  940.               streamResult.handleSessionPrepared(this);
  941.   
  942. >         state(State.STREAMING);
  943.   
  944.           for (StreamTransferTask task : transfers.values())

#658
src/java/org/apache/cassandra/streaming/StreamSession.java:940: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.handleSessionPrepared(StreamSession)' and 'SessionInfo StreamSession.getSessionInfo()' should be called atomically.
  938.       {
  939.           if (notifyPrepared)
  940. >             streamResult.handleSessionPrepared(this);
  941.   
  942.           state(State.STREAMING);

#659
src/java/org/apache/cassandra/streaming/StreamSession.java:942: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamResultFuture.handleSessionPrepared(StreamSession)' and 'void StreamSession.state(StreamSession$State)' should be called atomically.
  940.               streamResult.handleSessionPrepared(this);
  941.   
  942. >         state(State.STREAMING);
  943.   
  944.           for (StreamTransferTask task : transfers.values())

#660
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession$MessageStateSink.recordState(InetAddressAndPort,StreamSession$State)' and 'Collection NonBlockingHashMap.values()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#661
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'Collection NonBlockingHashMap.values()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#662
src/java/org/apache/cassandra/streaming/StreamSession.java:942: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.state(StreamSession$State)' and 'boolean Logger.isTraceEnabled()' should be called atomically.
  940.               streamResult.handleSessionPrepared(this);
  941.   
  942. >         state(State.STREAMING);
  943.   
  944.           for (StreamTransferTask task : transfers.values())

#663
src/java/org/apache/cassandra/streaming/StreamSession.java:958: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.taskCompleted(StreamTransferTask)' and 'Object NonBlockingHashMap.remove(Object)' should be called atomically.
  956.               else
  957.               {
  958. >                 taskCompleted(task); // there are no files to send
  959.               }
  960.           }

#664
src/java/org/apache/cassandra/streaming/StreamSession.java:944: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void StreamSession.taskCompleted(StreamTransferTask)' and 'boolean Iterator.hasNext()' should be called atomically.
  942.           state(State.STREAMING);
  943.   
  944. >         for (StreamTransferTask task : transfers.values())
  945.           {
  946.               Collection<OutgoingStreamMessage> messages = task.getFileMessages();

#665
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:2484: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set Collections.singleton(Object)' and 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' should be called atomically.
  2482.           // we return the main CFS first, which we rely on for simplicity in switchMemtable(), for getting the
  2483.           // latest commit log segment position
  2484. >         return Iterables.concat(Collections.singleton(this), indexManager.getAllIndexColumnFamilyStores());
  2485.       }
  2486.   

#666
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:2484: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' and 'Collection Map.values()' should be called atomically.
  2482.           // we return the main CFS first, which we rely on for simplicity in switchMemtable(), for getting the
  2483.           // latest commit log segment position
  2484. >         return Iterables.concat(Collections.singleton(this), indexManager.getAllIndexColumnFamilyStores());
  2485.       }
  2486.   

#667
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:2484: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'Set SecondaryIndexManager.getAllIndexColumnFamilyStores()' and 'Iterable Iterables.concat(Iterable,Iterable)' should be called atomically.
  2482.           // we return the main CFS first, which we rely on for simplicity in switchMemtable(), for getting the
  2483.           // latest commit log segment position
  2484. >         return Iterables.concat(Collections.singleton(this), indexManager.getAllIndexColumnFamilyStores());
  2485.       }
  2486.   

#668
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:2484: error: ATOMICITY_VIOLATION
  Atomicity Violation! - Functions 'void Collection.forEach(Consumer)' and 'Iterable Iterables.concat(Iterable,Iterable)' should be called atomically.
  2482.           // we return the main CFS first, which we rely on for simplicity in switchMemtable(), for getting the
  2483.           // latest commit log segment position
  2484. >         return Iterables.concat(Collections.singleton(this), indexManager.getAllIndexColumnFamilyStores());
  2485.       }
  2486.   

Found 669 issues
  ATOMICITY_VIOLATION: 669
